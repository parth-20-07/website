{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Me","text":"<p>Robotics Engineer and Product Developer</p> <p>I am a Robotics and Automation Engineer from Worcester Polytechnic Institute with industry experience in Embedded Product Development and specialization in Product Ideation to Market Ready since 2018.</p> <p></p> <p>Email: parth.pmech@gmail.com</p> <p>Degree: Masters in Robotics and Automation Engineering</p> <p>I am a Graduate in Robotics and Automation Engineering from Worcester Polytechnic Institute with an undergraduate in Electrical Engineering from Pandit Deendayal Energy University (formerly Pandit Deendayal Petroleum University). My research interest lies in the areas of Embedded Systems, Control Systems, Robot Localization, Motion Planning and Reinforcement Learning. ; I am currently working on Sensor-Fusion of IMU, Monocular Camera and LIDAR (Visual Inertial LIDAR Odometry). I have experience in Camera Calibration, and Visual SLAM. I am actively looking for full time opportunities.</p> <p>During my masters, I worked on a fully funded and paid project with the Executive Director of Academic and Research Computing, Mr. Siamak Najafi at WPI to develop a platform to create a mobile robot platform for create easy and autonomous 3D Scans of environment for visualizing and virtual touring.</p> <p>Currently, I am working at DEKA Research and Development as a Controls Systems Engineering Intern. My responsibilities includes robust camera calibration pipeline, developing Controls Algorithm for developing Neural Nets using Supervised Learning and using computer vision based manufacturing detect testing algorithms. In my spare time I like to workout at Gym, work on automation projects, read non-fiction and watch Sitcoms!</p>"},{"location":"#professional-experience","title":"Professional Experience","text":"<ul> <li>Control Systems Engineer, DEKA Research and Development<ul> <li>Improved an analytical closed-loop insulin control system by integrating multi-threading capabilities in C++ for machine learning model training, after adapting the system for Linux compatibility. This enhancement achieved a significant 96.7% reduction in runtime.</li> <li>Developed PLC systems cabinets with communication protocols like Ethernet, USB, RS-232, and RS-485 for an automated assembly line aimed at Quality Assurance for biomedical devices which improved quality identification accuracy by 18% and reduced part rejection cost by 16% per unit.</li> <li>Developed a Simulator for Type 1 Diabetic Patients to model meal-insulin response essential for developing a controller-based insulin pump using ANSI C. Ensured cross-platform compatibility, conducted unit testing, and improved data collection speeds by 840% and reduced research cycle time by 98.6%.</li> <li>Developed C++/ROS based Robust and Self Correcting tightly coupled LIDAR, Vision and IMU Based Algorithm for Autonomous Simultaneous Localization and Mapping (SLAM) for x86 Architecture with improved algorithm performance by CPU Load Balancing using Parallel Processing on Frame Data, reducing processing time by 23%</li> </ul> </li> <li>Computational Scientist, Worcester Polytechnic Institute<ul> <li>Developed a mobile platform framework for generating 3D Visualization Models for University Labs to construct a platform meant for Virtual tours which enabled immersive virtual tours for prospective students and individuals facing travel challenges, significantly enhancing accessibility and engagement.</li> <li>Focused on developing a framework for Camera, IMU and LIDAR-based sensor fusion for localization to implement NeRF (Neural Radiance Fields) based environment reconstruction and designing a Human-Robot Interaction platform to enhance user experience and interaction capabilities.</li> </ul> </li> <li>Augmented Reality Developer, Worcester Polytechnic Institute<ul> <li>I was privileged to be part of an exciting Augmented Reality (AR) project that has the potential to reshape how technicians work. Our focus was to empower technicians with hands-free data visualization.</li> <li>Hands-Free Data Visualization: I led the development of an AR application that allowed technicians to visualize critical data, graphs, and readings from tools like multimeter without taking their hands off their tasks.</li> <li>User-Centric Design: Drawing from my experience in designing seamless hardware-software compatibility for remote control integration, we ensured our AR app was intuitive and user-friendly, enabling technicians of all levels to adapt effortlessly.</li> <li>Real-time Insights: Helping technicians make informed decisions on the spot and significantly reducing errors.</li> </ul> </li> <li>Embedded Systems Engineer, Ecologic Pvt Ltd<ul> <li>Developed environmental sensory products for ATMEL Architecture MCUs following SDLC to develop modular software stack that garnered USD 40,000 in funding by addressing market needs for user friendly home safety products.</li> <li>Developed AWS IoT Core based smart automation products using FreeRTOS and C++ to set up easy and maintainable large-scale biodynamic farms which reduces labor costs by 39%.</li> </ul> </li> <li>Embedded Systems Engineer, Dash Dot Robotics<ul> <li>Developed an IoT-supported Smart Warehouse Inventory Management System to track inventory using MQTT enabled, and AWS connected for remote monitoring and real-time inventory tracking which reduced management time by 9% and improved labour costing by 9.4%.</li> <li>Developed the firmware in C++ based on Platform IO following the Software Development Lifecycle (SDLC) with Unit testing for ATMEL Architecture and CMake for embedded programming, deployment, and automated testing.</li> </ul> </li> </ul>"},{"location":"#research-experience","title":"Research Experience","text":"<ul> <li>Collaborative Simultaneous Localization and Mapping (SLAM) for Low-End Swarm Robots | C++, ROS, Gazebo | June' 24 - Aug' 24<ul> <li>Developed and deployed a decentralized collaborative SLAM system for Homogenous swarm robots, enhancing autonomous navigation through lightweight occupancy grid map development focusing on robot count scalability and simpler map merging with dimensional error under 2.5%.</li> </ul> </li> <li>Advanced SLAM Algorithms Implementation and Analysis | C++, Python, ROS, Gazebo | Sept\u201923 \u2013 Dec\u201923<ul> <li>Deployed, Tested and Analyzed innovative SLAM technologies, including LIMO, LVI-SAM, LIO-SAM, VINS-MONO, Faster-LIO, LOAM, and EMV-LIO, to benchmark their performance and finding key metrics such as accuracy, environment layout, and robustness under various conditions while critically analyzing and adapting these frameworks to enhance their functionality and performance.</li> </ul> </li> </ul>"},{"location":"#projects","title":"Projects","text":"<ul> <li>Snake Game Using Reinforcement Learning</li> <li>IMU Sensor Fusion for Attitude Estimation</li> </ul>"},{"location":"#education","title":"Education","text":"<ul> <li>M.S. Robotics &amp; Automation Engineering | GPA 3.89<ul> <li>Worcester Polytechnic Institute, Worcester, MA<ul> <li>Foundation of Robotics: RBE 500</li> <li>Robot Controls: RBE502</li> <li>Human Robot Interaction: RBE526</li> <li>Motion Planning: RBE 550</li> <li>Soft Robotics: RBE 530</li> <li>Swarm Intelligence: RBE 595</li> <li>Robot Dynamics: RBE501</li> </ul> </li> </ul> </li> <li>Extended Studies<ul> <li>UC San Diego Extended Studies<ul> <li>Advanced Digital Systems Design: ECE 574</li> <li>Project Management: MIS 576</li> </ul> </li> </ul> </li> <li>B.Tech Electrical Engineering | CGPA 9.08<ul> <li>Pandit Deendayal Energy University, Gujarat, India</li> </ul> </li> <li>Class I - XII<ul> <li>Bharatiya Vidya Bhavan's Vallabhram Mehta Public School, Gujarat, India</li> </ul> </li> </ul>"},{"location":"#achievements","title":"Achievements","text":"<ul> <li>Awarded INR 1,00,000 grant by the Government of Gujarat, India, to launch a startup researching multitool heads for 3D printers, reducing prototyping time by 86% and costs by 18%.</li> <li>Secured $10,000 in funding from Worcester Polytechnic Institute to develop an advanced robotics mobile platform for 3D scanning and reconstruction, significantly enhancing accessibility and engagement.</li> </ul>"},{"location":"#certification","title":"Certification","text":""},{"location":"#machine-learning-specialization","title":"Machine Learning Specialization","text":"<ol> <li>Supervised Machine Learning: Regression and Classification </li> <li>Advanced Learning Algorithms </li> </ol>"},{"location":"#contact","title":"Contact","text":"<p>Feel free to reach out to discuss any possible job opportunities, any fun project to collaborate or just ping me if you want to form a new connection.</p> <p>Email: parth.pmech@gmail.com</p>"},{"location":"Annotated%20Papers/","title":"Annotated Papers","text":"<p>I read a few research papers and articles now and then. For which I often annotate the documents and I would like to share it to anyone who might need a pre-annotated paper.</p>"},{"location":"Annotated%20Papers/#meal-simulation-model-of-the-glucose-insulin-system","title":"Meal Simulation Model of the Glucose-Insulin System","text":"<p>Link: Meal Simulation Model of Glucose - Insulin System <pre><code>@ARTICLE{4303268,\nauthor={Dalla Man, Chiara and Rizza, Robert A. and Cobelli, Claudio},\njournal={IEEE Transactions on Biomedical Engineering},\ntitle={Meal Simulation Model of the Glucose-Insulin System},\nyear={2007},\nvolume={54},\nnumber={10},\npages={1740-1749},\ndoi={10.1109/TBME.2007.893506}}\n</code></pre></p>"},{"location":"Annotated%20Papers/#swarm-slam-sparse-decentralized-collaborative-simultaneous-localization-and-mapping-framework","title":"Swarm-SLAM: Sparse Decentralized Collaborative Simultaneous Localization and Mapping Framework","text":"<p>Link: Swarm-SLAM Sparse Decentralized Collaborative Simultaneous Localization and Mapping Framework for Multi-Robot Systems <pre><code>@article{Lajoie_2024,\ntitle={Swarm-SLAM: Sparse Decentralized Collaborative Simultaneous Localization and Mapping Framework for Multi-Robot Systems},\nvolume={9},\nISSN={2377-3774},\nurl={http://dx.doi.org/10.1109/LRA.2023.3333742},\nDOI={10.1109/lra.2023.3333742},\nnumber={1},\njournal={IEEE Robotics and Automation Letters},\npublisher={Institute of Electrical and Electronics Engineers (IEEE)},\nauthor={Lajoie, Pierre-Yves and Beltrame, Giovanni},\nyear={2024},\nmonth=jan, pages={475\u2013482}}\n</code></pre></p>"},{"location":"Annotated%20Papers/#swarm-slam-challenges-and-perspectives","title":"Swarm SLAM: Challenges and Perspectives","text":"<p>Link: Swarm SLAM Challenges and Perspectives <pre><code>@ARTICLE{10.3389/frobt.2021.618268,\nAUTHOR={Kegeleirs, Miquel and Grisetti, Giorgio and Birattari, Mauro},\nTITLE={Swarm SLAM: Challenges and Perspectives},\nJOURNAL={Frontiers in Robotics and AI},\nVOLUME={8},\nYEAR={2021},\nURL={https://www.frontiersin.org/articles/10.3389/frobt.2021.618268},\nDOI={10.3389/frobt.2021.618268},\nISSN={2296-9144}}\n</code></pre></p>"},{"location":"Annotated%20Papers/#slam-and-map-merging","title":"SLAM and Map Merging","text":"<p>Link: SLAM and Map Merging <pre><code>@article{leon2009slam,\ntitle={SLAM and map merging},\nauthor={Le{\\'o}n, A and Barea, Rafael and Bergasa, Luis M and L{\\'o}pez, Elena and Oca{\\~n}a, Manuel and Schleicher, David},\njournal={Journal of Physical Agents},\nvolume={3},\nnumber={1},\npages={13--23},\nyear={2009}\n}\n</code></pre></p>"},{"location":"Annotated%20Papers/#a-fast-map-merging-algorithm-in-the-field-of-multirobot-slam","title":"A Fast Map Merging Algorithm in the Field of Multirobot SLAM","text":"<p>Link: A Fast Map Merging Algorithm in the Field of Multirobot SLAM <pre><code>@Article{169635,\nAUTHOR = {Yanli Liu, Xiaoping Fan, Heng Zhang},\nTITLE = {A Fast Map Merging Algorithm in the Field of Multirobot SLAM},\nJOURNAL = {The Scientific World Journal},\nVOLUME = {2013},\nYEAR = {2013},\nARTICLE-NUMBER = {169635},\nURL = {https://doi.org/10.1155/2013/169635},\nABSTRACT = {In recent years, the research on single-robot simultaneous localization and mapping (SLAM) has made a great success. However, multirobot SLAM faces many challenging problems, including unknown robot poses, unshared map, and unstable communication. In this paper, a map merging algorithm based on virtual robot motion is proposed for multi-robot SLAM. The thinning algorithm is used to construct the skeleton of the grid map\u2019s empty area, and a mobile robot is simulated in one map. The simulated data is used as information sources in the other map to do partial map Monte Carlo localization; if localization succeeds, the relative pose hypotheses between the two maps can be computed easily. We verify these hypotheses using the rendezvous technique and use them as initial values to optimize the estimation by a heuristic random search algorithm.},\nDOI = {10.1155/169635}\n}\n</code></pre></p>"},{"location":"Annotated%20Papers/A%20Fast%20Map%20Merging%20Algorithm%20in%20the%20Field%20of%20Multirobot%20SLAM/","title":"A Fast Map Merging Algorithm in the Field of Multirobot SLAM","text":"<p>Created: May 22, 2024 1:01 PM</p> <p>Paper Link: https://doi.org/10.1155/2013/169635</p> <p>Status: In progress</p>"},{"location":"Annotated%20Papers/A%20Fast%20Map%20Merging%20Algorithm%20in%20the%20Field%20of%20Multirobot%20SLAM/#introduction","title":"Introduction","text":""},{"location":"Annotated%20Papers/A%20Fast%20Map%20Merging%20Algorithm%20in%20the%20Field%20of%20Multirobot%20SLAM/#outline","title":"Outline","text":""},{"location":"Annotated%20Papers/A%20Fast%20Map%20Merging%20Algorithm%20in%20the%20Field%20of%20Multirobot%20SLAM/#annotated-paper","title":"Annotated Paper","text":"<p>A_Fast_Map_Merging_Algorithm_in_the_Field_of_Multirobot_SLAM.pdf</p>"},{"location":"Annotated%20Papers/A%20Fast%20Map%20Merging%20Algorithm%20in%20the%20Field%20of%20Multirobot%20SLAM/#citation","title":"Citation","text":"<pre><code>@Article{169635,\nAUTHOR = {Yanli Liu, Xiaoping Fan, Heng Zhang},\nTITLE = {A Fast Map Merging Algorithm in the Field of Multirobot SLAM},\nJOURNAL = {The Scientific World Journal},\nVOLUME = {2013},\nYEAR = {2013},\nARTICLE-NUMBER = {169635},\nURL = {https://doi.org/10.1155/2013/169635},\nABSTRACT = {In recent years, the research on single-robot simultaneous localization and mapping (SLAM) has made a great success. However, multirobot SLAM faces many challenging problems, including unknown robot poses, unshared map, and unstable communication. In this paper, a map merging algorithm based on virtual robot motion is proposed for multi-robot SLAM. The thinning algorithm is used to construct the skeleton of the grid map\u2019s empty area, and a mobile robot is simulated in one map. The simulated data is used as information sources in the other map to do partial map Monte Carlo localization; if localization succeeds, the relative pose hypotheses between the two maps can be computed easily. We verify these hypotheses using the rendezvous technique and use them as initial values to optimize the estimation by a heuristic random search algorithm.},\nDOI = {10.1155/169635}\n}\n</code></pre>"},{"location":"Annotated%20Papers/Meal%20Simulation%20Model%20of%20Glucose%20-%20Insulin%20System/","title":"Meal Simulation Model of Glucose - Insulin System","text":"<p>Created: January 26, 2024 11:35 AM</p> <p>Paper Link: https://pubmed.ncbi.nlm.nih.gov/17926672/</p> <p>Status: Done</p>"},{"location":"Annotated%20Papers/Meal%20Simulation%20Model%20of%20Glucose%20-%20Insulin%20System/#introduction","title":"Introduction","text":"<p>The paper focuses on providing Mathematical Process related to:</p> <ul> <li>Meal Digestion process from stomach to absorption</li> <li>Glucose Production and Decay</li> <li>Insulin Production and Decay for Type 1 and Type 2 Diabetics</li> <li>Delayed Insulin Effects on body</li> </ul>"},{"location":"Annotated%20Papers/Meal%20Simulation%20Model%20of%20Glucose%20-%20Insulin%20System/#anotated-paper","title":"Anotated Paper","text":"<p>Meal_Simulation_Model_of_the_Glucose-Insulin_System.pdf</p>"},{"location":"Annotated%20Papers/Meal%20Simulation%20Model%20of%20Glucose%20-%20Insulin%20System/#math-from-paper","title":"Math from Paper","text":"<p>Flow Diagram</p>"},{"location":"Annotated%20Papers/Meal%20Simulation%20Model%20of%20Glucose%20-%20Insulin%20System/#citation","title":"Citation","text":"<pre><code>@ARTICLE{4303268,\nauthor={Dalla Man, Chiara and Rizza, Robert A. and Cobelli, Claudio},\njournal={IEEE Transactions on Biomedical Engineering},\ntitle={Meal Simulation Model of the Glucose-Insulin System},\nyear={2007},\nvolume={54},\nnumber={10},\npages={1740-1749},\nkeywords={Sugar;Insulin;Diabetes;Databases;System testing;Sensor systems;Decision support systems;Discrete event simulation;Humans;Protocols;Artificial pancreas;diabetes;glucose homeostasis;glucose production;glucose sensors;glucose utilization;insulin infusion system;insulin secretion;kinetics;physiological control},\ndoi={10.1109/TBME.2007.893506}}\n</code></pre>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/","title":"SLAM and Map Merging","text":"<p>Created: March 13, 2024 10:06 AM</p> <p>Paper Link: https://www.researchgate.net/profile/Luis-Bergasa/publication/237149207_Multi-robot_SLAM_and_map_merging/links/0a85e5320ca3b8fb5a000000/Multi-robot-SLAM-and-map-merging.pdf</p> <p>Status: Done</p> <p>Table of Contents</p>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#introduction","title":"Introduction","text":"<p>The aim of the paper is to try ways to implement SLAM in multi-robot situation in decentralized manner.</p>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#outline","title":"Outline","text":""},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#1-multirobot-slam","title":"1. MultiRobot Slam","text":"<p>Centralized vs Decentralized SLAM</p> <p>Centralized System:</p> <p>Pros:</p> <ul> <li>Solutions close to optimal</li> </ul> <p>Cons:</p> <ul> <li>Computationally Intensive</li> <li>Needs a central Module to compute</li> </ul> <p>Decentralized System:</p> <p>Pros:</p> <ul> <li>Flexible and Robust</li> </ul> <p>Cons:</p> <ul> <li>Results in Suboptimal Solution</li> <li>Difficulty in Coordinating the Tasks</li> <li>Can cause issues when multiple robots scan the same area</li> </ul>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#2-potential-issues-in-slam","title":"2. Potential Issues in SLAM","text":"<ul> <li>Loop Closure is difficult when the single loop is large</li> <li>Choosing the right sensors suite to get better quality map but not be too computationally intensive.</li> </ul>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#3-rao-blackwellized-particle-filters","title":"3. Rao-Blackwellized Particle Filters","text":"<p>It uses particle filter based approach to build a probablistic slam map which is based on Bayes Theorem.</p> <p>The objective is to build up a highly accurate map of an unknown environment with unknown initial position of robots using Rao-Blackwellized particle filtering and scan matching.</p>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#4-grid-based-slam-algorithm-idea","title":"4. Grid-Based SLAM Algorithm Idea","text":"<p>The ideology for this slam can be implemented as follows for a single robot:</p> <ol> <li>Build the Map using Grid-based Fast-SLAM</li> <li>Localize using Rao-Blackwellized Mapping</li> <li>Perform Map building and Localization simulationeously using Scan-Matching SLAM.</li> </ol> <p>Scan-Matching SLAM</p> <p>This algorithm is used where the problem is of concurrent mapping and localization and it can be treated as maximum likelihood estimation problem.</p> <p>The map can be represented as:</p> \\[ m_{t} = \\{&lt; o_{t}, x_{t} &gt;\\}_{t = 0, ..., T} \\] <p>where:</p> <ul> <li>\\(m\\rightarrow\\) Map</li> <li>\\(t\\rightarrow\\) Time Index</li> <li>\\(o_{T}\\rightarrow\\) Laser scan</li> <li>\\(x_{T}\\rightarrow\\)Pose</li> </ul> <p>The goal of mapping is to find the most likely map given the data with the cost function:</p> \\[ argmax_{m} P(m|d_{t}) \\] <p>Detailed math can be found from equation <code>1</code>.</p> <p>Grid-based Fast-SLAM</p> <p>This algorithm adapts Fast-SLAM algorithm to occupancy grid map to generate volumetric representation of the environment that does not require any predefined landmark and it can therefore model arbitary types of environment.</p> <p>The pseudocode is available in the paper.</p> <p>Rao-Blackwellized mapping</p> <p>Idea of Rao-Blackwellized particle filter for slam is to estimate a posterior \\(p(x_{1:t} | o_{1:t},a_{0:t})\\) about potential trajectories \\(x_{1:t}\\) of the robot given its observation \\(o_{1:t}\\) and its odometry measurements \\(a_{0:t}\\) and to use this afterwords to compute a posterior over maps and trajectories.</p>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#5-performance-comparision","title":"5. Performance Comparision","text":"<p>A performance comparision is done between all three algorithms. Following results were seen:</p> <ul> <li>Detected errors were small in small-dimension environments.</li> <li>Best results in terms of accuracy can be obtained in grid-based Fast-SLAM algorithm but creates a really sparse map.</li> <li>The corridors with less points of interest tend to be measured smaller than real ones for scan-matching because of maximum likelihood estimation.</li> </ul>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#6-multi-robot-implementation","title":"6. Multi-robot Implementation","text":"<ul> <li>The Global Map is generated using CARMEN (Montecarlo localization) approach.</li> <li>Robots generate their local maps and when they meet, robot A uses Robot B\u2019s partial map and detection model to generate the global map</li> <li>Since this is grid based mapping, overlaying the partial maps can help with map merging considering robot A position as global position and relation position of Robot B to Robot A during data exchange to reorient local map of Robot B and update the global map.</li> </ul>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#anotated-paper","title":"Anotated Paper","text":"<p>SLAM_and_Map_Merging.pdf</p>"},{"location":"Annotated%20Papers/SLAM%20and%20Map%20Merging/#citation","title":"Citation","text":"<pre><code>@article{leon2009slam,\n  title={SLAM and map merging},\n  author={Le{\\'o}n, A and Barea, Rafael and Bergasa, Luis M and L{\\'o}pez, Elena and Oca{\\~n}a, Manuel and Schleicher, David},\n  journal={Journal of Physical Agents},\n  volume={3},\n  number={1},\n  pages={13--23},\n  year={2009}\n}\n</code></pre>"},{"location":"Annotated%20Papers/Swarm%20SLAM%20Challenges%20and%20Perspectives/","title":"Swarm SLAM Challenges and Perspectives","text":"<p>Created: February 20, 2024 9:38 PM</p> <p>Paper Link: https://www.frontiersin.org/articles/10.3389/frobt.2021.618268/full</p> <p>Status: Done</p>"},{"location":"Annotated%20Papers/Swarm%20SLAM%20Challenges%20and%20Perspectives/#annotated-paper","title":"Annotated Paper","text":"<p>Swarm_SLAM_Challenges_and_Perspectives.pdf</p>"},{"location":"Annotated%20Papers/Swarm%20SLAM%20Challenges%20and%20Perspectives/#math-from-paper","title":"Math From Paper","text":""},{"location":"Annotated%20Papers/Swarm%20SLAM%20Challenges%20and%20Perspectives/#citation","title":"Citation","text":"<pre><code>@ARTICLE{10.3389/frobt.2021.618268,\nAUTHOR={Kegeleirs, Miquel and Grisetti, Giorgio and Birattari, Mauro},\nTITLE={Swarm SLAM: Challenges and Perspectives},\nJOURNAL={Frontiers in Robotics and AI},\nVOLUME={8},\nYEAR={2021},\nURL={[https://www.frontiersin.org/articles/10.3389/frobt.2021.618268](https://www.frontiersin.org/articles/10.3389/frobt.2021.618268)},\nDOI={10.3389/frobt.2021.618268},\nISSN={2296-9144}}\n</code></pre>"},{"location":"Annotated%20Papers/Swarm-SLAM%20Sparse%20Decentralized%20Collaborative%20Simultaneous%20Localization%20and%20Mapping%20Framework%20for%20Multi-Robot%20Systems/","title":"Swarm-SLAM Sparse Decentralized Collaborative Simultaneous Localization and Mapping Framework for Multi-Robot Systems","text":"<p>Created: February 20, 2024 9:41 PM</p> <p>Paper Link: https://arxiv.org/abs/2301.06230</p> <p>GitHub URL: https://github.com/MISTLab/Swarm-SLAM.git</p> <p>Status: Done</p>"},{"location":"Annotated%20Papers/Swarm-SLAM%20Sparse%20Decentralized%20Collaborative%20Simultaneous%20Localization%20and%20Mapping%20Framework%20for%20Multi-Robot%20Systems/#annotated-paper","title":"Annotated Paper","text":"<p>Swarm-SLAM_Sparse_Decentralized_Collaborative_Simultaneous_Localization_and_Mapping_Framework_for_Multi-Robot_Systems.pdf</p>"},{"location":"Annotated%20Papers/Swarm-SLAM%20Sparse%20Decentralized%20Collaborative%20Simultaneous%20Localization%20and%20Mapping%20Framework%20for%20Multi-Robot%20Systems/#math-from-paper","title":"Math From Paper","text":""},{"location":"Annotated%20Papers/Swarm-SLAM%20Sparse%20Decentralized%20Collaborative%20Simultaneous%20Localization%20and%20Mapping%20Framework%20for%20Multi-Robot%20Systems/#citation","title":"Citation","text":"<pre><code>@article{Lajoie_2024,\ntitle={Swarm-SLAM: Sparse Decentralized Collaborative Simultaneous Localization and Mapping Framework for Multi-Robot Systems},\nvolume={9},\nISSN={2377-3774},\nurl={[http://dx.doi.org/10.1109/LRA.2023.3333742](http://dx.doi.org/10.1109/LRA.2023.3333742)},\nDOI={10.1109/lra.2023.3333742},\nnumber={1},\njournal={IEEE Robotics and Automation Letters},\npublisher={Institute of Electrical and Electronics Engineers (IEEE)},\nauthor={Lajoie, Pierre-Yves and Beltrame, Giovanni},\nyear={2024},\nmonth=jan, pages={475\u2013482} }\n</code></pre>"},{"location":"Essential%20Reads/Non-Fiction/","title":"Non-Fiction","text":""},{"location":"Essential%20Reads/Non-Fiction/#books","title":"Books","text":""},{"location":"Essential%20Reads/Non-Fiction/#elon-musk-tesla-spacex-and-the-quest-for-a-fantastic-future","title":"Elon Musk: Tesla, SpaceX, and the Quest for a Fantastic Future","text":"<p>Author: Ashley Vance Link: Amazon</p> <p>i</p>"},{"location":"Essential%20Reads/Non-Fiction/#12-rules-for-life","title":"12 Rules for Life","text":"<p>Author: Jordan Peterson Link: Amazon</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#beyond-order","title":"Beyond Order","text":"<p>Author: Jordan Peterson Link: Amazon</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#cant-hurt-me","title":"Can't Hurt Me","text":"<p>Author: David Goggins Link: Amazon</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#never-finished","title":"Never Finished","text":"<p>Author: David Goggins Link: Amazon</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#make-time","title":"Make Time","text":"<p>Author: Derek Slvers Link: Amazon</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#make-time_1","title":"Make Time","text":"<p>Author: Jake Knapp Link: Amazon</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#podcasts","title":"Podcasts","text":""},{"location":"Essential%20Reads/Non-Fiction/#andrew-huberman","title":"Andrew Huberman","text":"<p>Host: Andrew Huberman Link: Spotify | Youtube Music</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#jordan-peterson-podcast","title":"Jordan Peterson Podcast","text":"<p>Host: Jordan Peterson Link: Spotify | Youtube Music</p> <p></p>"},{"location":"Essential%20Reads/Non-Fiction/#joe-rogan-experience","title":"Joe Rogan Experience","text":"<p>Host: Joe Rogan Link: Spotify | Youtube Music</p> <p></p>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/","title":"Computer Science and Software Development","text":""},{"location":"Essential%20Reads/Engineering/Computer%20Science/#computer-science","title":"Computer Science","text":""},{"location":"Essential%20Reads/Engineering/Computer%20Science/#fundamentals","title":"Fundamentals","text":"<ul> <li> But How Do It Know? - The Basic Principles of Computers for Everyone Paperback \u2013 J Clark Scott</li> <li> Operating Systems: Three Easy Pieces - Remzi H Arpaci-Dusseau</li> <li> OSS University</li> <li> Compiler, OS, CN, DBMS Fundamentals in 1 Hour for Placements and Internship | Core CS Resources</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#low-level","title":"Low Level","text":"<ul> <li> Crafting Interpreters - Robert Nystrom</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#software-development","title":"Software Development","text":"<ul> <li> codecrafters-io/build-your-own-x</li> <li> Developer Roadmaps</li> <li> Free For Dev</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#gpu-fundamentals","title":"GPU Fundamentals","text":"<ul> <li> Programming Massively Parallel Processors: A Hands-on Approach 4th Edition - Wen-mei W. Hwu</li> <li> CUDA by Example: An Introduction to General-Purpose GPU Programming 1st Edition - Jason Sanders</li> <li> Multicore and GPU Programming: An Integrated Approach 2nd Edition - Gerassimos Barlas</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#linux-fundamentals","title":"Linux Fundamentals","text":"<ul> <li> Linux Device Driver Development - Second Edition: Everything you need to start with device driver development for Linux kernel and embedded Linux - John Madieu</li> <li> Linux Kernel Programming: A comprehensive guide to kernel internals, writing kernel modules, and kernel synchronization - Kaiwan N Billimoria</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#embedded-software-systems","title":"Embedded Software Systems","text":"<ul> <li> Building Embedded Linux Systems: Concepts, Techniques, Tricks, and Traps 2nd Edition - Karim Yaghmour</li> <li> Mastering Embedded Linux Programming - Third Edition: Create fast and reliable embedded solutions with Linux 5.4 and the Yocto Project 3.1 (Dunfell) 3rd ed. Edition - Frank Vasquez</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#programming-fundamentals","title":"Programming Fundamentals","text":""},{"location":"Essential%20Reads/Engineering/Computer%20Science/#software-design-guides","title":"Software Design Guides","text":"<ul> <li> # The Nature of Code: Simulating Natural Systems with JavaScript - Daniel Shiffman</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#build-system","title":"Build System","text":""},{"location":"Essential%20Reads/Engineering/Computer%20Science/#cmake","title":"CMake","text":"<ul> <li> Modern CMake for C++ - Second Edition: Effortlessly build cutting-edge C++ code and deliver high-quality solutions 2nd ed. Edition - Rafa\u0142 \u015awidzi\u0144ski</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#c-language","title":"C Language","text":""},{"location":"Essential%20Reads/Engineering/Computer%20Science/#fundamentals_1","title":"Fundamentals","text":"<ul> <li> Handmade Hero Complete</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#c-language_1","title":"C++ Language","text":""},{"location":"Essential%20Reads/Engineering/Computer%20Science/#fundamentals_2","title":"Fundamentals","text":"<ul> <li> Tour of C++, A (C++ In-Depth Series) 3rd Edition - Bjarne Stroustrup</li> <li> C++ Primer (5th Edition) 5th Edition - Stanley Lippman</li> <li> Professional C++ (Tech Today) 6th Edition - Marc Gregoire</li> <li> C++17 In Detail: Learn the Exciting Features of The New C++ Standard! - Bart\u0142omiej Filipek</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#best-practices","title":"Best Practices","text":"<ul> <li> C++ Best Practices: 45ish Simple Rules with Specific Action Items for Better C++ (With Color Syntax Highlighting) Paperback \u2013 May 16, 2022 - Jason Turner</li> <li> Hands-On Design Patterns with C++: Solve common C++ problems with modern design patterns and build robust applications, 2nd Edition - Fedor G Pikus</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#advanced-topics","title":"Advanced Topics","text":"<ul> <li> C++ Concurrency in Action 2nd Edition - Anthony Williams</li> <li> C++ High Performance, Second Edition: Master the art of optimizing the functioning of your C++ code 2nd ed. Edition - Bj\u00f6rn Andrist</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#rust-language","title":"Rust Language","text":"<ul> <li> The Rust Programming Language, 2nd Edition 2nd Edition - Steve Klabnik</li> </ul>"},{"location":"Essential%20Reads/Engineering/Computer%20Science/#python-language","title":"Python Language","text":""},{"location":"Essential%20Reads/Engineering/Control%20Systems/","title":"Control Systems","text":""},{"location":"Essential%20Reads/Engineering/Control%20Systems/#linear-systems","title":"Linear Systems","text":"<ul> <li> Linear Systems Theory: Second Edition - Joao P. Hespanha</li> </ul>"},{"location":"Essential%20Reads/Engineering/Control%20Systems/#non-linear-systems","title":"Non-Linear Systems","text":"<ul> <li> Applied Nonlinear Control - Jean-Jacques Slotline, Welping Li</li> <li> Nonlinear Systems: Third Edition - Hassan K. Khalil</li> </ul>"},{"location":"Essential%20Reads/Engineering/Control%20Systems/#robotics-specific","title":"Robotics Specific","text":"<ul> <li> Robot Modeling and Control - Mark W. Spong, Seth Hutchinson, M. Vidyasagar</li> <li> Theory of Robot Control (Communications and Control Engineering - Carlos Canudas de Wit, Bruno Siciliano, Georges Bastin</li> </ul>"},{"location":"Essential%20Reads/Engineering/Electronics/","title":"Electronics","text":""},{"location":"Essential%20Reads/Engineering/Electronics/#classics","title":"Classics","text":"<ul> <li> The Art of Electrics - Paul Horowitz</li> <li> Semiconductor Physics And Devices: Basic Principles - Donald A. Neamen</li> <li> Microelectronic Circuits (The Oxford Series in Electrical and Computer Engineering) - Adel S. Sedra</li> <li> Electronic Devices and Circuit Theory Paperback \u2013 Boylestad Nashelsky</li> <li> Grob's Basic Electronics: 2024 Release - Mitchel Schultz</li> </ul>"},{"location":"Essential%20Reads/Engineering/Electronics/#design-guides","title":"Design Guides","text":"<ul> <li> Practical Electronics for Inventors, Fourth Edition 4th Edition - Paul Scherz </li> </ul>"},{"location":"Essential%20Reads/Engineering/Machine%20Learning/","title":"ML/DL/AI","text":""},{"location":"Essential%20Reads/Engineering/Machine%20Learning/#machine-learning","title":"Machine Learning","text":""},{"location":"Essential%20Reads/Engineering/Machine%20Learning/#fundamentals","title":"Fundamentals","text":"<ul> <li> Machine Learning Engineering - Andriy Burkov</li> <li> The Hundred-Page Machine Learning Book Hard Cover ed. Edition - Andriy Burkov</li> <li> Designing Machine Learning Systems: An Iterative Process for Production-Ready Applications 1st Edition - Chip Huyen</li> </ul>"},{"location":"Essential%20Reads/Engineering/Machine%20Learning/#deep-learning","title":"Deep Learning","text":""},{"location":"Essential%20Reads/Engineering/Machine%20Learning/#fundamentals_1","title":"Fundamentals","text":"<ul> <li> Deep Learning from Scratch: Building with Python from First Principles 1st Edition - Seth Weidman</li> <li> Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems 3rd Edition - Aur\u00e9lien G\u00e9ron</li> </ul>"},{"location":"Essential%20Reads/Engineering/Machine%20Learning/#ai","title":"AI","text":""},{"location":"Essential%20Reads/Engineering/Machine%20Learning/#generative-ai","title":"Generative AI","text":"<ul> <li> Generative AI for Everyone - DeepLearning.AI</li> <li> Complete LLM Guide: https://github.com/karpathy/llm.c</li> <li> Chat-GPT Guide: https://www.linkedin.com/posts/raohacker_ilya-sutskever-gave-john-carmack-this-reading-activity-7197367475989069824-JpYl?utm_source=share&amp;utm_medium=member_desktop</li> <li> LLM Crash Course 9 hours:Jack Blandin, PhD on LinkedIn: #ai #machinelearning #aiengineering #genai | 82 comments</li> <li> Complete Guide: steven2358/awesome-generative-ai</li> <li> Generative AI Crash Course: genieincodebottle/generative-ai</li> </ul>"},{"location":"Essential%20Reads/Engineering/Maths/","title":"Mathematics","text":""},{"location":"Essential%20Reads/Engineering/Maths/#probability","title":"Probability","text":"<ul> <li> Relearn the basics:<ul> <li> How to Prove It by Velleman</li> <li> How to Think Like a Mathematician by Houston</li> <li> Algebra and Trigonometry by Gelfand (for understanding why and how instead of what)</li> <li> Precalculus in a Nutshell by Simmons (for reference)</li> <li> Measurement by Lockhart (for inspiration)</li> </ul> </li> <li> Calculus (which one(s), and how deep?):<ul> <li> Calculus by Strang</li> <li> Calculus vol. 1 and Calculus vol. 2 by Apostol</li> <li> Calculus by Spivak (solutions)</li> <li> Introduction to Calculus and Analysis: Volume 1 by Curant (and 11/1 II/2?)</li> </ul> </li> <li> Linear Algebra (which one(s) and how deep?):<ul> <li> Intro to Linear Algebra by Strang</li> <li> Matrix Algebra Useful for Statistics by Searle</li> <li> Matrix Algebra: Theory, Computations, and Applications in Statistics by Gentle</li> </ul> </li> <li> Probability (which one(s)?):<ul> <li> An Introduction to Probability Theory and Its Applications, Vol. 1 and Vol. 2 by Feller (for intuitive understanding)</li> <li> Introduction to Probability Theory by Hoel, Port, Stone</li> <li> A Probability Path by Resnick (for measure-theoretic/modern approach?)</li> <li> Fifty Challenging Problems in Probability by Mosteller</li> </ul> </li> <li> Core Statistics (which one(s)?):<ul> <li> Probability and Statistics by DeGroot and Schervish</li> <li> Statistical Inference Casella and Berger</li> </ul> </li> </ul>"},{"location":"Essential%20Reads/Engineering/Robotics/","title":"Robotics Concepts","text":""},{"location":"Essential%20Reads/Engineering/Robotics/#probabilistic-robotics","title":"Probabilistic Robotics","text":"<ul> <li> Probabilistic Robotics - Sebastian Thrun</li> </ul>"},{"location":"Projects/BFS%2C%20DFS%20and%20Djikstra%20Search/","title":"BFS, DFS and Djikstra Search","text":"","tags":[]},{"location":"Projects/BFS%2C%20DFS%20and%20Djikstra%20Search/#bfs-breadth-first-search","title":"BFS - Breadth First Search","text":"","tags":[]},{"location":"Projects/BFS%2C%20DFS%20and%20Djikstra%20Search/#dfs-depth-first-search","title":"DFS - Depth First Search","text":"","tags":[]},{"location":"Projects/BFS%2C%20DFS%20and%20Djikstra%20Search/#djikstra-search","title":"Djikstra Search","text":"<p>Developed at: Worcester Polytechnic Institute</p> <p>Project date: January, 2023</p> <p>GitHub URL: parth-20-07/BFS-DFS-and-Djikstra-Search-using-CPP</p>","tags":[]},{"location":"Projects/BFS%2C%20DFS%20and%20Djikstra%20Search/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>This project is focused on implementing and comparing three fundamental algorithms in graph theory and computer science: Depth-First Search (DFS), Breadth-First Search (BFS), and Dijkstra's algorithm, using C++.</p> <ul> <li>DFS: This algorithm aims for the fastest path planning but does not guarantee the shortest path.</li> <li>BFS: Known for finding the shortest path by scanning the entire environment, BFS can be time and memory-intensive.</li> <li>Dijkstra's Algorithm: While being a bit more time-consuming compared to BFS, it provides the shortest path possible. </li> </ul> <p>This repository seems to be a practical exploration of these algorithms, highlighting their distinct characteristics and applications in solving graph-related problems. </p>","tags":[]},{"location":"Projects/BLE%20Smart%20Switch/","title":"Bluetooth Low Energy Smart Switch","text":"","tags":[]},{"location":"Projects/BLE%20Smart%20Switch/#product-renders","title":"Product Renders","text":"","tags":[]},{"location":"Projects/BLE%20Smart%20Switch/#product-schematics","title":"Product Schematics","text":"<p>Project date: December, 2021</p> <p>GitHub URL: parth-20-07/BLE-Smart-Switch</p>","tags":[]},{"location":"Projects/BLE%20Smart%20Switch/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>The BLE Smart Switch provides convenient control over electrical sockets through Bluetooth technology. It enables users to manage home appliances remotely, ensuring energy efficiency and enhanced home automation.</p> <p>Features: - Control up to 2 sockets remotely. - Schedule socket activation/deactivation. - Real-time monitoring and control through a BLE app. - Easy-to-use interface for hassle-free operation. - Compact and modern design, suitable for various environments.</p>","tags":[]},{"location":"Projects/Combinational%20and%20Sampling%20Based%20Motion%20Planning%20for%20MultiAgents/","title":"Combinational and Sampling Based Motion Planning for MultiAgents","text":"","tags":[]},{"location":"Projects/Combinational%20and%20Sampling%20Based%20Motion%20Planning%20for%20MultiAgents/#simulation","title":"Simulation","text":"","tags":[]},{"location":"Projects/Combinational%20and%20Sampling%20Based%20Motion%20Planning%20for%20MultiAgents/#setup","title":"Setup","text":"","tags":[]},{"location":"Projects/Combinational%20and%20Sampling%20Based%20Motion%20Planning%20for%20MultiAgents/#developed-motion-path","title":"Developed Motion Path","text":"<p>Firetruck Motion Path </p> <p>Wumpus Motion Path </p>","tags":[]},{"location":"Projects/Combinational%20and%20Sampling%20Based%20Motion%20Planning%20for%20MultiAgents/#results","title":"Results","text":"<p>Developed at: Worcester Polytechnic Institute</p> <p>Project date: February, 2023</p> <p>GitHub URL: parth-20-07/Combinational-And-Sampling-Based-Motion-Planning-for-MultiAgents</p>","tags":[]},{"location":"Projects/Combinational%20and%20Sampling%20Based%20Motion%20Planning%20for%20MultiAgents/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>The objective of this task is to showcase the use of combinatorial and sampling-based techniques for path planning. Our approach involves implementing A* planning in a continuous space while considering the kinematic limitations of a vehicle across state lattices. Additionally, we employ a probabilistic road map method to assist the aforementioned technique.</p>","tags":[]},{"location":"Projects/Gearbox%20Disassembly%20using%20RRT%20Algorithm%20in%203D%20Space/","title":"Gearbox Disassembly using RRT Algorithm in 3D Space","text":"","tags":[]},{"location":"Projects/Gearbox%20Disassembly%20using%20RRT%20Algorithm%20in%203D%20Space/#simulation","title":"Simulation","text":"","tags":[]},{"location":"Projects/Gearbox%20Disassembly%20using%20RRT%20Algorithm%20in%203D%20Space/#setup","title":"Setup","text":"","tags":[]},{"location":"Projects/Gearbox%20Disassembly%20using%20RRT%20Algorithm%20in%203D%20Space/#motion","title":"Motion","text":"","tags":[]},{"location":"Projects/Gearbox%20Disassembly%20using%20RRT%20Algorithm%20in%203D%20Space/#results","title":"Results","text":"<p>Developed at: Worcester Polytechnic Institute</p> <p>Project date: April, 2023</p> <p>GitHub URL: parth-20-07/Gearbox-Disassembly-using-RRT-Algorithm-in-3D-Space</p>","tags":[]},{"location":"Projects/Gearbox%20Disassembly%20using%20RRT%20Algorithm%20in%203D%20Space/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>The objective of this task is to disassemble a gearbox with no collisions using RRT Algorithm. We are using the gearbox called SM-465.</p> <p>Restriction based Experimentation:</p> <ul> <li>Restricting the Planner to only 2 axes improves the speed to find the path.</li> <li>Restricting the domain of the new node search reduces the path planning time.</li> <li>Too small of a search domain satisfies the position requirement but fails the orientation requirement for motion.</li> </ul> <p>Search Based Experimentation</p> <ul> <li>Setting the node search radius too small makes the path smooth but takes a lot of time.</li> <li>Setting the node search radius too big results in the shaft not being able to get out of the Gearbox due to collisions while motioning.</li> </ul>","tags":[]},{"location":"Projects/IMU%20Sensor%20Fusion%20for%20Attitude%20Estimation/","title":"IMU Sensor Fusion for Attitude Estimation","text":"<p>Developed at: Worcester Polytechnic Institute</p> <p>Project date: December, 2023</p> <p>GitHub URL: parth-20-07/Sensor-Fusion-and-Attitude-Estimation</p>","tags":[]},{"location":"Projects/IMU%20Sensor%20Fusion%20for%20Attitude%20Estimation/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>This is a comprehensive project focused on implementing basic sensor fusion techniques and attitude estimation algorithms. This project showcases the use of Inertial Measurement Unit (IMU) data to accurately estimate 3D orientation and attitude. Key features of the repository include the implementation of algorithms for gyroscope and accelerometer data analysis, calibration techniques for sensor data alignment, and the integration of sensor fusion methods for enhanced accuracy.</p>","tags":[]},{"location":"Projects/Inventory%20Management%20System/","title":"Inventory Management System","text":"","tags":[]},{"location":"Projects/Inventory%20Management%20System/#product-photos","title":"Product Photos","text":"<p>Project date: March, 2022</p> <p>GitHub URL: parth-20-07/Inventory-Management-System</p>","tags":[]},{"location":"Projects/Inventory%20Management%20System/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>The project aims at creating an IoT Connected system which is used to manage the inventory of the user.Our product is connected to Amazon Web Services which stores the data on server and the data can be used to store the historical inventory, daily updates and future prediction for inventory restocking.</p> <p>Features:</p> <ul> <li>Autonomous System</li> <li>Real-Time Management</li> <li>Accurate System</li> </ul>","tags":[]},{"location":"Projects/Pocket%20CO2%20Monitor/","title":"Pocket CO2 Monitor","text":"","tags":[]},{"location":"Projects/Pocket%20CO2%20Monitor/#product-renders","title":"Product Renders","text":"","tags":[]},{"location":"Projects/Pocket%20CO2%20Monitor/#product-schematics","title":"Product Schematics","text":"","tags":[]},{"location":"Projects/Pocket%20CO2%20Monitor/#product-board-design","title":"Product Board Design","text":"<p>Project date: May, 2022</p> <p>GitHub URL: parth-20-07/Pocket-CO2-Monitor</p>","tags":[]},{"location":"Projects/Pocket%20CO2%20Monitor/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>Developed a compact and efficient CO2 monitor that displays carbon dioxide levels along with temperature and humidity. This device is designed to be portable with a significant emphasis on user-friendliness and practicality.</p> <p>Key Features:</p> <ul> <li>Displays CO2 levels, temperature, and humidity.</li> <li>Approximately 1.5 hours of battery life.</li> <li>MicroUSB Type B charging support.</li> </ul>","tags":[]},{"location":"Projects/Pocket%20Dust%20Monitor/","title":"Pocket Dust Monitor","text":"","tags":[]},{"location":"Projects/Pocket%20Dust%20Monitor/#product-renders","title":"Product Renders","text":"","tags":[]},{"location":"Projects/Pocket%20Dust%20Monitor/#product-schematics","title":"Product Schematics","text":"","tags":[]},{"location":"Projects/Pocket%20Dust%20Monitor/#product-board-design","title":"Product Board Design","text":"<p>Project date: March, 2022</p> <p>GitHub URL: parth-20-07/Pocket-Dust-Monitor</p>","tags":[]},{"location":"Projects/Pocket%20Dust%20Monitor/#brief-introduction-on-project","title":"Brief Introduction on Project","text":"<p>This compact air monitoring device is designed for assessing the quality of air both indoors and outdoors. It provides real-time data on particulate matter levels, making it a valuable tool for health and environmental awareness.</p> <p>Key Features:</p> <ul> <li>Displays PM2.5 value and safety level.</li> <li>Simultaneous monitoring of PM1.0, PM2.5, and PM10.</li> <li>PM2.5 values plotted on a graph in 5-minute intervals.</li> <li>Approximately 1.5 hours of battery life.</li> <li>Type C charging support.</li> </ul>","tags":[]},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/","title":"Autonomous Aerial Vehicles","text":""},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/#math-concepts","title":"Math Concepts","text":"<ul> <li>Interpolation</li> </ul>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/#sensor-concepts","title":"Sensor Concepts","text":"<ul> <li>IMU Sensor Fusion for Attitude Estimation</li> </ul>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/#resources","title":"Resources","text":"<ul> <li>Demystifying Drone Dynamics!</li> </ul>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/","title":"IMU Basics and Attitude Estimation","text":""},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#key-points","title":"Key Points","text":"<ul> <li>Orientation is also referred to as Attitude</li> </ul>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#basics-of-imu","title":"Basics of IMU","text":"<p>An IMU is a combination of sensors that can read:</p> <ul> <li>Gyroscope: Angular Velocities \u03c9</li> <li>Accelerometer: Linear acceleration \u03b1</li> <li>Magnetometer: reads Magnetic Fields m</li> </ul> <p>A 6-DoF IMU Contains Gyroscope and Accelerometer </p> <p>A 9-DoF IMU contains all three and can be called as:</p> <ul> <li>Magnetic Angular Rate and Gravity Sensor (MARG)</li> <li>Attitude and Heading Reference System (AHRS)</li> <li>9-DOF IMU</li> </ul> <p>We want to estimate</p> \\[ \\begin{bmatrix} \\phi &amp; \\theta &amp; \\psi \\end{bmatrix}^{T}_{t+1} \\] <p>We have</p> \\[ \\omega_{t} = \\begin{bmatrix} \\dot{\\phi} &amp; \\dot{\\theta} &amp; \\dot{\\psi} \\end{bmatrix}^{T}_{t} \\] <p>We can estimate the values using numerical integration of \u03c9t. But the issue is, that we need the initial values of the quadrotor so we can get the initial values to start on.</p> <ul> <li>One option can be to have an absolute sensor like Vicon which can give you a start value.</li> <li>Another option is other sensors like the Camera.</li> <li>One of the other viable assumptions you can make is that your system starts from rest and is levelled perfectly.</li> </ul> <p>Thus, the estimate of values can be made as:</p> \\[ \\begin{bmatrix} \\phi\\\\ \\theta\\\\ \\psi \\end{bmatrix}_{t+1} = \\begin{bmatrix} \\phi\\\\ \\theta\\\\ \\psi \\end{bmatrix}_{t} + \\begin{bmatrix} \\dot{\\phi}\\\\ \\dot{\\theta}\\\\ \\dot{\\psi} \\end{bmatrix}_{t}\\delta{t} \\]"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#attitude-estimation-from-an-ideal-accelerometer","title":"Attitude Estimation from an Ideal Accelerometer","text":"<p>We work with an assumption that when we say roll, pitch and yaw, we are talking about Euler Angles.</p> <p>We want to estimate</p> \\[ \\begin{bmatrix} \\phi &amp; \\theta &amp; \\psi \\end{bmatrix}^{T}_{t+1} \\] <p>We have</p> \\[ a_{t} = \\begin{bmatrix} a_{x} &amp; a_{y} &amp; a_{z} \\end{bmatrix}^{T}_{t} \\] <p>We can estimate this using:</p> \\[ \\phi = \\tan^{-1}(\\frac{a_{y}}{\\sqrt{a_{x}^2 + a_{z}^2}})\\\\ \\theta = \\tan^{-1}(\\frac{a_{x}}{\\sqrt{a_{y}^2 + a_{z}^2}})\\\\ \\psi = \\tan^{-1}(\\frac{\\sqrt{a_{x}^2 + a_{y}^2}}{a_{z}}) \\]"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#real-world-problems-with-imu","title":"Real-World Problems with IMU","text":"<p>Both the Gyroscope and Accelerometer have noise and bias!</p> <p>Bias: They don\u2019t read zero at rest!</p> <p>Noise: The values don\u2019t remain constant when the sensor is not moving!</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#mathematical-models","title":"Mathematical Models","text":""},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#gyroscope-mathematical-model","title":"Gyroscope: Mathematical Model","text":"<p>\u03c9\u2004=\u2004\u03c9\u0302\u2005+\u2005bg\u2005+\u2005ng</p> <p>where:</p> <ul> <li>\u03c9 : Measured Value</li> <li>\u03c9\u0302 : Ideal Value</li> <li>bg : Bias</li> <li>ng : White Gaussian Noise</li> </ul> <p>Also, it is assumed that the derivative of bias follows gaussian distribution:</p> \\[ \\dot{b_{g}} \\sim \\mathcal{N} \\ (0, \\textbf{Q}_{g})\u00a0 \\] <p>Due to this, Bias will overshadow the real values (be too big) when integrating if not compensated and Noise will make values drift from real values during integration.</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#accelerometer-mathematical-model","title":"Accelerometer: Mathematical Model","text":"<p>a=WRBT(a\u0302\u2212gW)\u2005+\u2005ba\u2005+\u2005na</p> <p>where:</p> <ul> <li>a : Measured Value $<sup>{}{_{}}</sup>{T}( - g^{}) $ : Ideal Value - ba : Bias - na : White Gaussian Noise</li> </ul> <p>Also, it is assumed that derivative of bias follows gaussian distribution:</p> \\[ \\dot{b_{a}} \\sim \\mathcal{N} \\ (0, \\textbf{Q}_{g}) \\] <p>Accelerometer measure net linear acceleration on the device. Values change when device translates (not just when it rotates) </p> <p>Due to this, Bias will overshadow the real values (be too big) when integrating if not compensated.</p> <p>And Noise will make values drift from real values during integration.</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#bias-and-noise","title":"Bias and Noise","text":"<p>Bias varies on device start and with external factors such as temperature!</p> <p>Can be estimated by as a function of expectation of values when the device is at rest.</p> <p>Noise varies with external factors such as temperature!</p> <p>Can be estimated as variances of values when device is at rest.</p> <p>Notes: The Bias and Noise change over time and need to be estimated on the fly. </p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#attitude-estimation","title":"Attitude Estimation","text":"<p>from a Real Gyroscope</p> <ol> <li>Estimate Bias at rest</li> <li>Remove Bias from Initial Value (Rest)</li> <li>Numerically Integrate</li> </ol> <p>Pros: Good for Fast Movement.</p> <p>Cons: Drift like crazy over time. </p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#attitude","title":"Attitude","text":"<p>Estimation from a Real Accelerometer</p> <ol> <li>Estimate Bias at Rest</li> <li> <p>Remove Bias from initial value(Rest) and estimate Orientation by decomposing the vector a.</p> <p>t</p> </li> <li> <p>Low Pass Filter the values for better estimate (Because Accelerometer Values cause a lot of errors at high speed but good for long term integral. This will cause the filter values to lag a bit.)</p> </li> </ol> \\[   \\begin{gather*}   \\hat{x_{t+1}} = (1-\\gamma)\\hat{x_{t}} + \\gamma\\tilde{x_{t+1}}\\\\   \\gamma \\in [0,1]   \\end{gather*}   \\] <p>Generally, \u03b3 is chosen to be a small value like 0.2</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#complementary-filter","title":"Complementary Filter","text":"<pre><code>flowchart LR\n\nA[IMU] --&gt;|omega| B[Integrate]\nB --&gt; D[x't+1,g']\nD--&gt; E[High Pass Filter]\nE --&gt; |*'1-gamma'| F[Sum]\nF --&gt; G[xhat't+1']\n\nA[IMU] --&gt;|acceleration a| C[Accelerations to Angle Conversion]\nC --&gt; H[x't+1,a']\nH --&gt; I[Low Pass Filter]\nI --&gt; |* gamma|F</code></pre>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/IMU%20Basics%20and%20Attitude%20Estimation/#resources","title":"Resources","text":"<ul> <li> <p>ENAE788M: Class 2 Part 2 - IMU Basics, Attitude Estimation using CF and Madgwick</p> <p>https://www.youtube.com/embed/8hRoASoBEwY?si=57a5gXdxrDgEoPRs</p> </li> </ul>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/","title":"Interpolation","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#why-do-we-need-this","title":"Why do we need this?","text":"<p>Interpolation can help you construct values between two points based on available data. Common Use Case:</p> <p>Sensor Data Fusion: Often Sensors operate at different frequency from each other, so the data you might try to collect might not match for a particular timestamp. You can use Interpolation to generate Data for the missing time stamp based on available data from previous records.</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#lerp-linear-interpolation","title":"LERP: Linear Interpolation","text":"<p>Assume a situation with 2 vectors vi and vf as follows:</p> <p></p> <p>Initial-Situation</p> <p>LERP is used when you want a linear interpolation from start to end. This is the shortest distance between the two points as shown:</p> <p></p> <p></p> <p>Assume you want to find a point on this new vector vfi at some distance from vi which is denoted by Vector vs from the origin.</p> <p>Here,</p> \\[ s\u2004\u2208\u2004[0,1]\\\\ \\begin{equation} \\begin{split} v_{s} = v_{i} + s(v_{f} - v_{i})\\\\ v_{s} = (1-s)v_{i} + sv_{f} \\end{split} \\end{equation} \\] <p>Thus,</p> \\[ \\begin{split} \\forall s=0 \\Rightarrow v_{s} = v_{i}\\\\ \\forall s=1 \\Rightarrow v_{s} = v_{1} \\end{split} \\]"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#time-version-for-lerp","title":"Time Version for LERP","text":"<p>Lerp(p0,p1;t)\u2004=\u2004(1\u2212t)p0\u2005+\u2005tp1</p> <p>for t\u2004\u2208\u2004[0,1]</p> <p>This works best in following situations: </p> <p>The Interpolation is needed in a 3D or less Cartesian System where the interpolation is estimated to be a straight line. </p> <p>The faster computation is essential over accuracy. </p> <p>The data points are so close to each other that the \u2202X can be approximated to a straight line. </p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#slerp-spherical-linear-interpolation","title":"SLERP: Spherical Linear Interpolation","text":"<p>Assume a situation with 2 vectors vi and vf on the surface of the sphere of unit distance from center of the sphere as follows:</p> <p></p> <p></p> <p>SLERP is used when you want an interpolation along an arc between vf and vi. A hypothetical plane (Plane OFI) is constructed to image the motion that passes through the point on sphere for vi, vf and the origin of the sphere. We assume a vector vs along the arc on the same plane OFI.</p> <p>Assume a slice from the plane as shown:</p> <p></p> <p></p> <p>Here:</p> <ul> <li>Let the angle between vf and vi be \u03b8.</li> <li>If we want to find a vector vs on the resultant arc, the angle of vs w.r.t. vi is s\u03b8.</li> </ul> <p>vs\u2004=\u2004\u03b1svi\u2005+\u2005\u03b2svf</p> <p>If we take a closer look at the defined system, we have the understanding that the vectors are all of equal magnitude with a common origin. i.e.\u00a0Vector vf and vector vs can be written in terms of a rotation matrix R and vi.</p> \\[ \\begin{split} v_{f} = v_{i}R\\\\ v_{s} = v_{i}R^{s} \\end{split}\u00a0 \\] <p>where: s\u2004\u2208\u2004[0,1]</p> <p>Thus,</p> \\[ \\begin{split} v_{s} = \\alpha_{s}v_{i} + \\beta_{s}v_{f}\\\\ v_{i}R^{s} = \\alpha_{s}v_{i} + \\beta_{s}v_{i}R \\end{split} \\] <p>Upon solving this based on the video attached in resources, the final result seems as follows:</p> \\[ v_{s} = \\frac{\\sin((1-s)\\theta)}{\\sin(\\theta)}v_{i} + \\frac{\\sin(s\\theta)}{\\sin(\\theta)}v_{f}\u00a0 \\]"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#time-version-for-slerp","title":"Time Version for SLERP","text":"\\[ Slerp(p_{0}, p_{1};t) = \\frac{\\sin((1-t)\\theta)}{\\sin(\\theta)}p_{0} + \\frac{\\sin(t\\theta)}{\\sin(\\theta)}p_{1}\u00a0 \\] <p>where, \u03b8\u2004=\u2004cos\u22121(p0\u22c5p1)</p> <p>for t\u2004\u2208\u2004[0,1]</p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#time-version-for-quaternion-slerp","title":"Time Version for Quaternion SLERP","text":"<p>Slerp(q0,q1;t)\u2004=\u2004(q1q0\u22121)tq0</p> <p>for t\u2004\u2208\u2004[0,1]</p> <p>This works best in following situations: - The Interpolation is needed in a 3D or less Polar System where the interpolation is estimated to be along a curve. - This process is computationally more intensive than LERP. </p>"},{"location":"Study%20Notes/Autonomous%20Aerial%20Vehicles/Interpolation/#resources","title":"Resources","text":"<ul> <li>Geometric Algebra - Linear and Spherical Interpolation (LERP, SLERP, NLERP)</li> <li>Wikipedia: Slerp</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/","title":"C++ Programming Guide","text":"","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/#essentials","title":"Essentials","text":"","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/#tools","title":"Tools","text":"<ul> <li>Project Setup</li> <li>Debugging</li> <li>Testing</li> <li>Static Analysis</li> <li>Makefile</li> </ul>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/#concepts","title":"Concepts","text":"<ul> <li>Multithreading</li> <li>Object Oriented Programming</li> <li>Function Overloading</li> <li>Function Pointers and Lambdas</li> </ul>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/#keywords","title":"Keywords","text":"<ul> <li>new</li> <li>auto</li> <li>Exit Status</li> </ul>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/#resources","title":"Resources","text":"<ul> <li>Good Books</li> <li>Tips</li> <li>Borrow Checker, Lifetimes and Destructor Arguments in C++</li> <li>C++ Coding with Neovim - Prateek Raman - CppCon 2022</li> </ul>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Overloading/","title":"Function Overloading","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Overloading/#notes","title":"Notes","text":"<p>Function overloading is a feature of C++ where you can have multiple functions with same name performing different functions or taking/returning different parameters. The compiler can choose which function to call based on the type of input provided to the function.</p> <p>e.g.</p> <pre><code>void print(int);    // Takes an Integer as input\nvoid print(double); // Takes a floating-point as input\nvoid print(string); // Takes a string as input\nvoid user()\n{\n    print(42);      // calls print(int)\n    print(9.65);    // calls print(double)\n    print(\"Hello\"); // calls print(string)\n}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Overloading/#ambiguous-nature","title":"Ambiguous Nature","text":"<p>If two alternative functions could be called, but neither is better than the other, the called is deemed ambiguous and the compiler gives and error.</p> <pre><code>void print(double, int);\nvoid print(int, double);\nvoid user()\n{\n    print(0, 0); // error: ambiguous\n}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Overloading/#resources","title":"Resources","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Pointers%20and%20Lambdas/","title":"Function Pointers and Lambdas","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Pointers%20and%20Lambdas/#lambdas","title":"Lambdas","text":"<ul> <li>Lambdas are short inline functions that are going to be used only once and thus do not need to be written as independent functions.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Pointers%20and%20Lambdas/#general-structure","title":"General Structure","text":"<pre><code>[captures]&lt;tparams&gt;(params) specs {body}\n</code></pre> <ul> <li><code>[captures]</code> \u2192 Interface to decide what variables are to be shared to the lambda\u2019s body from the code scope.</li> <li><code>tparams</code> \u2192</li> <li><code>params</code> \u2192 Parameters to pass in the function. Similar to capture but you can pass constant values without definition here.</li> <li><code>{body}</code> \u2192 The body to write the the function implementation.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Pointers%20and%20Lambdas/#captures","title":"Captures","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Pointers%20and%20Lambdas/#function-pointers","title":"Function Pointers","text":"<ul> <li>Function Pointers are a way to assign function to variables. It can be used to pass function as parameters to other functions.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Function%20Pointers%20and%20Lambdas/#resources","title":"Resources","text":"<ul> <li>C++11 - Lambda Closures, the Definitive Guide - Cprogramming.com</li> <li>Lambdas in C++</li> <li>Lambda expressions (since C++11) - cppreference.com</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Multithreading/","title":"Multithreading","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Multithreading/#concurrency","title":"Concurrency","text":"<ul> <li>Concurrency means multiple threads running at the same time without sharing any resources.</li> <li>Commonly used for splitting tasks between threads that can be worked independently.</li> <li>the <code>int main()</code> runs the main thread, you need to use <code>join()</code> to attach the rest of the threads to the main thread so that the program does not exit before the secondary threads end.</li> </ul> <p>Basic Usage:</p> <pre><code>#include &lt;thread&gt;\n#include &lt;iostream&gt;\n\nvoid workFunc(int* ptr, size_t times)\n{\n    while(times--) {\n        *ptr += 1;\n    }\n}\n\nint main(int argc, char const *argv[])\n{\n    int* numbers = new int[3];\n\n    std::thread t1(workFunc, numbers, 500);\n    std::thread t2(workFunc, numbers + 1, 600);\n    std::thread t3(workFunc, numbers + 2, 700);\n\n    t1.join();\n    t2.join();\n    t3.join();\n\n    for(int i = 0; i &lt; 3; ++i)\n        std::cout &lt;&lt; \"Number Slot \" &lt;&lt; (int)i &lt;&lt; \" is \" &lt;&lt; (int)numbers[i] &lt;&lt; std::endl;\n\n    delete[] numbers;\n    return 0;\n}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Multithreading/#shared-resources","title":"Shared Resources","text":"<ul> <li>A resource where two different threads can access the same memory address is called a shared resource.</li> <li>Shared resources can be managed between threads using <code>mutex</code>. They are like batons which indicate that only when you have the baton, can you edit the shared data.</li> </ul> <p>Example:</p> <pre><code>#include &lt;thread&gt;\n#include &lt;mutex&gt;\n#include &lt;queue&gt;\n\ntemplate&lt;class T&gt;\nclass SafeQueue {\npublic:\n    void push(const T&amp; val) {\n        std::lock_guard&lt;std::mutex&gt; lock(_m);\n        _q.push(val);\n    }\n\n    bool pop(T&amp; val) {\n        std::lock_guard&lt;std::mutex&gt; lock(_m);\n        if (!_q.empty()) {\n            val = _q.front();\n            _q.pop();\n            return true;\n        } else {\n            return false;\n        }\n    }\nprivate:\n    std::mutex _m;\n    std::queue&lt;T&gt; _q;\n};\n</code></pre> <ul> <li><code>std::lock_guard</code> is a new way of holding mutex as it self-releases when you are out of scope. This helps against accidentally not releasing the mutex when the thread scope is finished.</li> <li><code>std::conditional_variable</code> can be used to introduce synchronization between threads.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Multithreading/#resources","title":"Resources","text":"<ul> <li>Concurrency support library (since C++11) - cppreference.com</li> <li>std::condition_variable - cppreference.com</li> <li>C++ Multithreading, the simple way</li> <li>Multithreading in C++ - GeeksforGeeks</li> <li>When to use multithreading in C++?</li> <li>C++ Advanced Multithreading Guide - Mutexes, Asyncs, Futures</li> <li>A tutorial on modern multithreading and concurrency in C++</li> <li>An Introduction to Multithreading in C++20 - Anthony Williams - CppCon 2022</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/","title":"Object Oriented Programming","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#basic-terminology","title":"Basic Terminology","text":"<ul> <li>Below is the basic representation of how a class named <code>main</code> can be initiated.</li> </ul> <pre><code>class main\n{\nprivate:\n    /* data */\npublic:\n    main(/* args */);\n    ~main();\n};\n\nmain::main(/* args */) {}\nmain::~main() {}\n</code></pre> <ul> <li>The function and variables defined under <code>private:</code> tag can only be accessed from inside the class.</li> <li>The function and variables defined under <code>public:</code> tag can be accessed from anywhere the class is defined.</li> <li><code>return_type main::function_name()</code> can be used to define a method in a class from outside the class. This is useful when the function is defined in a header file and you don\u2019t wish to recompile all the files containing the header file. Example here is <code>main::main(/* args */)</code></li> <li><code>main:::main()</code> is the class constructor. It can be used to create a new default constructor which can take in the basic information needed to make the class.</li> <li><code>main::~main()</code> is the class deconstructor. It can be used to delete the class once is it no more useful.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#constructors","title":"Constructors","text":"<ul> <li>When a class is made and you don\u2019t make a custom constructor, the compiler generates a default constructor with some random garbage value.</li> <li>Custom Constructor can be made using <code>main::main(/* args */)</code> which can take the variables needed to make the class.</li> </ul>  \ud83d\udca1 \u26a0\ufe0f ***Warning: The name of the constructor should be the same as the class.***   <ul> <li>Below is how the custom constructor can be developed and initiated to store values in the public variables of the class.</li> </ul> <pre><code>Employee::Employee(std::string Name, std::uint8_t Age, std::string CompanyName)\n{\n    this-&gt;name = Name;\n    this-&gt;age = Age;\n    this-&gt;company = CompanyName;\n}\nint main(int argc, char *argv[])\n{\n    Employee employee1 = Employee(\"Parth\", 23, \"WPI\");\n    employee1.introduce_yourself();\n}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#methods","title":"Methods","text":"<p>Methods are functions in the class that are created to interact with the class to perform certain tasks.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is done to hide the variables by putting them in a private class. This is done to stop the user from directly changing the value of the variable. This is generally done to avoid variable change with the value it should not be having. There are three types of access modifiers which can determine the access of a variable or function.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#public","title":"<code>public:</code>","text":"<p>Any Variable or Function defined under <code>public:</code> modifier can be accessed when using the class.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#private","title":"<code>private:</code>","text":"<p>The variable or function defined under private: modifier can only be accessed from inside the function. This v/f cannot be accessed even via inheritance.</p> <p>The v/f can be indirectly accessed by users if the developer makes methods for their access. This is done by two types of methods shown:</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#protected","title":"<code>protected:</code>","text":"<p>These v/f are not visible when using the class but are accessible/visible when the inheritance class is designed for the primary class.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#getters","title":"Getters","text":"<p>This is the type of method that can be created to retrieve the value of a particular variable in a private tag without allowing the user the right to access it directly.</p> <p>If in the above example, the age is made private for the safety of manipulation directly, it can be made available to the user by generating the following method:</p> <pre><code>std::uint8_t get_Age(void)\n{\n    return this-&gt;age;\n}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#setters","title":"Setters","text":"<p>This type of method can be used to set the value of a variable you want to keep private from the user\u2019s capability of directly accessing and editing. The developer can use setters to put restrictions on the user from setting invalid data like setting the age below a specific value by checking the input value in <code>set_Age</code> method and only updating it if the requirement is met.</p> <p>This can be done by generating the method as shown below:</p> <pre><code>void set_Age(std::uint8_t Age)\n{\n    this-&gt;age = Age;\n}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#abstract-class","title":"Abstract Class","text":"<p>An abstract class in C++ has at least one pure virtual function by definition. In other words, a function that has no definition. The abstract class\u2019s descendants must define the pure virtual function; otherwise, the subclass would become an abstract class in its own right.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#basics","title":"Basics","text":"<p>Abstraction is done when you want to design a complex program at the backend but do not want the developer/user using your code to tackle/struggle with your code. This is an abstraction layer for users with simplistic usage.</p> <p>Whichever class signs an abstract class has to implement and create the program to implement the function.</p> <p>Example:</p> <p>Assume that the coffee committee sits down and decides on a standard for how the interface of the coffee machine should be. They decided that to make the machine standard for consumers, the device should have an inlet to put coffee powder, an inlet to store water, and a button to brew coffee.</p> <p>So the committee programmer sits down to make an abstract class for the interface which looks like this as shown below:</p> <pre><code>class AbstractMachineInterface\n{\npublic:\n    virtual void putCoffeeHere() = 0;\n    virtual void putWaterHere() = 0;\n    virtual void pressButtonToBrewCoffee() = 0;\n};\n</code></pre> <p>Now, whichever company wants to design the firmware and the machine for their brand of a coffee machine, can inherit this abstract class and design an internal function to the function.</p> <pre><code>class Keurig : AbstractMachineInterface\n{\nprivate:\npublic:\n    void putCoffeeHere()\n    {\n        // Implement the code here\n    }\n    void putWaterHere()\n    {\n        // Implement the code here\n    }\n    void pressButtonToBrewCoffee()\n    {\n        // Implement the code here\n    }\n};\n</code></pre> <p>This feature allows each coffee brand to change the functionality as per their needs inside the machine but still keep the outside interface standard for all users.</p> <ul> <li><code>virtual void putCoffeeHere() = 0;</code> is the function created in the Abstract Class which the new class using the abstract class has to explain and create the procedure for it.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#inheritance","title":"Inheritance","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#basics_1","title":"Basics","text":"<p>Inheritance is useful when you want to create a primary class that contains the common attributes and functions among multiple secondary unique classes and the secondary classes can use the features of the primary class.</p> <p>Example:</p> <p>Assume a catalog of various types of cars. There can be electric, petrol and diesel cars. All the cars share common features like the Tyre Rim size, weight, brand, Name, etc. but share different features like features, fuel quality measure, etc. Rather than creating classes for each type and repeating the common attributes, inheritance can be used in them.</p> <pre><code>class Cars\n{\nprivate:\n    std::string carName, carBrand;\n    std::uint8_t carWeightInTons;\n\npublic:\n    Cars(std::string name, std::string Brand, std::uint8_t weight_in_tons)\n    {\n        this-&gt;carName = name;\n        this-&gt;carBrand = Brand;\n        this-&gt;carWeightInTons = weight_in_tons;\n    }\n};\nclass ElectricCars : public Cars\n{\nprivate:\n    std::uint8_t BatteryCapacity;\n\npublic:\n    ElectricCars(std::string name, std::string Brand, std::uint8_t weight_in_tons, std::uint8_t battery_capacity) : Cars(name, Brand, weight_in_tons) { this-&gt;BatteryCapacity = battery_capacity; }\n};\nint main(int argc, char *argv[])\n{\n    ElectricCars tesla = ElectricCars(\"Model S\", \"Tesla\", 5600, 2400);\n    return EXIT_SUCCESS;\n}\n</code></pre> <p>The class electric cars now have unique features despite retaining the attributes from the Cars class.</p> <ul> <li> <p>Format for inheritance is:</p> <pre><code>class parentClass\n{\nprivate: /* data */\npublic:\n    parentClass(/* args */);\n    ~parentClass();\n};\nclass childClass : &lt;access_modifier_type&gt; parentClass\n{\nprivate:\npublic:\n    childClass(/* args */);\n    ~childClass();\n};\n</code></pre> <p>The <code>&lt;access_modifier_type&gt;</code> decided whether the user using the <code>childClass</code> has access to the function and variables in <code>parentClass</code>. If the modifier type is <code>public</code>, the user can access all the v/f in the parentClass. Leaving it blank, results in default as <code>private</code>.</p> </li> <li> <p>Creating the constructors as shown below allows you to use the parent constructor directly while just focusing on the parameters needed to populate the child class.</p> <pre><code>ElectricCars(\n    std::string name,\n    std::string Brand,\n    std::uint8_t weight_in_tons,\n    std::uint8_t battery_capacity)\n    : Cars(name, Brand, weight_in_tons)\n{\n    this-&gt;BatteryCapacity = battery_capacity;\n}\n</code></pre> </li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#types-of-inheritance","title":"Types of Inheritance","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#single-inheritance","title":"Single Inheritance","text":"<pre><code>//Base Classclass A\n{ public void fooA() { //TO DO: }}//Derived Classclass B : A\n{ public void fooB() { //TO DO: }}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#multi-level-inheritance","title":"Multi-level Inheritance","text":"<pre><code>//Base Classclass A\n{ public void fooA() { //TO DO: }}//Derived Classclass B : A\n{ public void fooB() { //TO DO: }}//Derived Classclass C : B\n{ public void fooC() { //TO DO: }}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#multiple-inheritance","title":"Multiple Inheritance","text":"<pre><code>//Base Classclass A\n{ public void fooA() { //TO DO: }}//Base Classclass B\n{ public void fooB() { //TO DO: }}//Derived Classclass C : A, B\n{ public void fooC() { //TO DO: }}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#multipath-inheritance","title":"Multipath Inheritance","text":"<pre><code>//Base Classclass A\n{ public void fooA() { //TO DO: }}//Derived Classclass B : A\n{ public void fooB() { //TO DO: }}//Derived Classclass C : A\n{ public void fooC() { //TO DO: }}//Derived Classclass D : B, A, C\n{ public void fooD() { //TO DO: }}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#hierarchical-inheritance","title":"Hierarchical Inheritance","text":"<pre><code>//Base Classclass A\n{ public void fooA() { //TO DO: }}//Derived Classclass B : A\n{ public void fooB() { //TO DO: }}//Derived Classclass C : A\n{ public void fooC() { //TO DO: }}//Derived Classclass D : C\n{ public void fooD() { //TO DO: }}//Derived Classclass E : C\n{ public void fooE() { //TO DO: }}//Derived Classclass F : B\n{ public void fooF() { //TO DO: }}//Derived Classclass G :B\n{ public void fooG() { //TO DO: }}\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#hybrid-inheritance","title":"Hybrid Inheritance","text":"<pre><code>//Base Classclass A\n{ public void fooA() { //TO DO: }}//Base Classclass F\n{ public void fooF() { //TO DO: }}//Derived Classclass B : A, F\n{ public void fooB() { //TO DO: }}//Derived Classclass C : A\n{ public void fooC() { //TO DO: }}//Derived Classclass D : C\n{ public void fooD() { //TO DO: }}//Derived Classclass E : C\n{ public void fooE() { //TO DO: }}\n</code></pre> <p>Reference: Understanding Inheritance and Different Types of Inheritance</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#polymorphism","title":"Polymorphism","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#basics_2","title":"Basics","text":"<p>Polymorphism in OOP is when a parent class reference is used to refer to a child class object. It means that both the parent and child class can have the same function name inside and when written properly, the child function can be called. This can be useful as shown below:</p> <pre><code>class Cars\n{\nprivate:\n    std::string carName, carBrand;\n    std::uint8_t carWeightInTons;\n\npublic:\n    Cars(\n        std::string name,\n        std::string Brand,\n        std::uint8_t weight_in_tons)\n    {\n        this-&gt;carName = name;\n        this-&gt;carBrand = Brand;\n        this-&gt;carWeightInTons = weight_in_tons;\n    }\n    virtual void info(void)\n    {\n        std::cout &lt;&lt; \"Car: \" &lt;&lt; this-&gt;carName &lt;&lt; std::endl;\n    }\n};\nclass ElectricCars : public Cars\n{\nprivate:\n    std::uint8_t BatteryCapacity;\n\npublic:\n    ElectricCars(\n        std::string name,\n        std::string Brand,\n        std::uint8_t weight_in_tons,\n        std::uint8_t battery_capacity) : Cars(name, Brand, weight_in_tons)\n    {\n        this-&gt;BatteryCapacity = battery_capacity;\n    }\n    void info(void)\n    {\n        std::cout &lt;&lt; \"Battery Capacity: \" &lt;&lt; std::to_string(this-&gt;BatteryCapacity) &lt;&lt; std::endl;\n    }\n};\n</code></pre> <p>Unless the child class wants the function <code>info()</code> to change its behavior, it can keep on using the parent class function <code>info()</code>. But if the child class wants the same function to perform different actions, it can be changed using polymorphism.</p> <ul> <li>If you want to enable polymorphism for a function, remember to add the <code>virtual</code> tag before it in the parent class so that when called, the compiler knows that it has to search for the child class function with the same name.</li> <li>If after defining <code>virtual</code> in the parent class, you do not define the same function in the child class; the compiler will run the function from the parent class itself.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#use-cases","title":"Use Cases","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#dereferencing-the-object","title":"Dereferencing the Object","text":"<p>Assume an object <code>tesla1</code>created as follows:</p> <pre><code>ElectricCars tesla1 = ElectricCars(\"Model S\", \"Tesla\", 200, 240);tesla1.info();\n</code></pre> <p>You can dereference the object using a pointer and access it using \u2192 operator as follows:</p> <pre><code>Cars *c1 = &amp;tesla1;c1-&gt;info();\n</code></pre> <p>Both the cases of <code>tesla1.info()</code> and <code>c1-&gt;info()</code> will output the same results.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#correct-use-case","title":"Correct Use Case","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#always-create-a-class-object-using-pointers","title":"Always create a class object using pointers.","text":"<p>Creating a class object with a pointer allows you to dereference the object. This allows you to easily pass the class across functions and edit the values by simply going to the memory location and making the desired changes.</p> <pre><code>class cat\n{\nprivate:\npublic:\n    int Age;\n};\nvoid DoSetAge(cat *pCat, std::uint8_t pAge)\n{\n    pCat-&gt;Age = pAge;\n    std::cout &lt;&lt; \"DoSetAge Function: \" &lt;&lt; pCat-&gt;Age &lt;&lt; \" Address: \" &lt;&lt; pCat &lt;&lt; std::endl;\n}\nint main(int argc, char *argv[])\n{\n    cat *mCat = new cat;\n    mCat-&gt;Age = 0;\n    std::cout &lt;&lt; \"Main Function: \" &lt;&lt; mCat-&gt;Age &lt;&lt; \" Address: \" &lt;&lt; mCat &lt;&lt; std::endl;\n    DoSetAge(mCat, 10);\n    std::cout &lt;&lt; \"Main Function: \" &lt;&lt; mCat-&gt;Age &lt;&lt; \" Address: \" &lt;&lt; mCat &lt;&lt; std::endl;\n    return EXIT_SUCCESS;\n}\n</code></pre> <p>The Output would look similar to like this:</p> <pre><code>Main Function: 0 Address: 0x559d87746eb0\nDoSetAge Function: 10 Address: 0x559d87746eb0\nMain Function: 10 Address: 0x559d87746eb0\n</code></pre> <p>As seen here, the pointer is passed to be an object which allows you to modify the object directly by accessing the addresses.</p> <p>\u26a0\ufe0f Warning: The <code>new</code> keyword might be new (pun intended) for you. You can look into it further by clicking here: </p> <p><code>new</code> keyword</p> <p>\u2757 When working with inherited classes, the correct format is:</p> <pre><code>&lt;base_class&gt; object_name = new &lt;inherited_class&gt;(&lt;constructor&gt;)\n</code></pre> <p>Defining the variable this way will help your object act like a pointer and you can access the base_class function and variables directly and in the hierarchy using \u2192 operator.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#defining-functions-properly","title":"Defining Functions properly","text":"<p>If you are making a class for a header file that can be accessed by someone else, the best method is to make those functions using the <code>virtual</code> tag. This allows the inherited classes to redefine the function if necessary without messing with the naming or the header file.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#hacks","title":"Hacks","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#friend","title":"<code>friend</code>","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#reinterpret_cast","title":"<code>reinterpret_cast</code>","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Object%20Oriented%20Programming/#resources","title":"Resources","text":"<ul> <li>Types of Inheritance in C++ Explained With Examples | Simplilearn</li> <li>Can I access private members from outside the class without using friends?</li> <li>Can I access private members from outside the class without using friends?</li> <li>reinterpret_cast conversion - cppreference.com</li> <li>reinterpret_cast in C++ | Type Casting operators - GeeksforGeeks</li> <li>Friend declaration - cppreference.com</li> <li>Friend Class and Function in C++ - GeeksforGeeks</li> <li>Understanding Inheritance and Different Types of Inheritance</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Tips/","title":"Tips","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Tips/#braces-for-initialization","title":"Braces {} for initialization","text":"<p>You can define a variable in 2 formats:</p> <pre><code>double d1 = 2.3;double d2{4.9};\n</code></pre> <p>The <code>=</code> form is traditional and dates back to C, but if in doubt, use the general <code>{}</code>-list forms. It saves you from a conversation that loses information.</p> <pre><code>int i1 = 7.8; // i1 becomes 7int i2 {7.8}; //error: floating point to integer conversion\n</code></pre> <p>Using <code>{}</code> detects conversion and forces you to correct the mistakes. It is a good step to stop mistakes.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Tips/#single-quotes-as-digit-separators","title":"Single Quotes as digit separators","text":"<p>To make long literals more readable for humans, we can use a single quote (\u2019) as a digit separator. For example, \u03c0 is about</p> <pre><code>3.14159'26535'89793'23846'26433'83279'50288\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Tips/#stdfor_each","title":"std::for_each","text":"<p>Guide: std::for_each</p> <p>Syntax:</p> <pre><code>for (&lt;data_type&gt; &lt;variable_name&gt;:&lt;list_name&gt;)    {        //Use &lt;variable_name&gt; for work    }\n</code></pre> <p>Another option is to use <code>std::for_each().</code> It provides you with control over the indexes.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Concepts/Tips/#resources","title":"Resources","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/","title":"Exit Status","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#how-is-an-exit_status-code-useful","title":"How is an exit_status code useful?","text":"<p>In C and C++, the <code>main</code> function is the entry point of a program. When a program is executed, the operating system calls the <code>main</code> function, and its return value plays a significant role in the communication between the program and the operating system.</p> <p>The <code>main</code> function in C and C++ has a return type of <code>int</code>, which allows it to return an integer value. The return value serves as an indication of the status or outcome of the program\u2019s execution to the operating system. Here\u2019s how Unix (and most modern operating systems) make use of the return value from the <code>main</code> function:</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#exit-status_1","title":"Exit Status","text":"<p>The return value of the <code>main</code> function is often referred to as the \u201cexit status\u201d of the program. It is an integer that represents the program\u2019s termination status. By convention, a return value of <code>0</code> typically indicates successful execution, while a non-zero value (usually positive) indicates an error or some specific issue that occurred during the program\u2019s execution.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#accessing-the-exit-status","title":"Accessing the Exit Status","text":"<p>In Unix, after a program finishes execution, the exit status can be accessed by the parent process (typically the shell) that initiated the program. This exit status can be checked using the special shell variable <code>$?</code>. For example, after running a program, you can check the exit status in a Unix shell like this:</p> <pre><code>./my_programecho $?\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#signal-status","title":"Signal Status","text":"<p>Besides using specific return values, the operating system can also communicate with the program through signals. Signals are used to notify processes about various events, such as errors, termination requests, or other conditions. A program can set up signal handlers to handle specific signals and take appropriate actions.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#error-handling","title":"Error Handling","text":"<p>The <code>main</code> function can return different non-zero values to indicate specific error conditions. For example, returning <code>1</code> might indicate a file not found error, while returning <code>2</code> could indicate insufficient memory. The choice of error codes and their meanings is up to the developer.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#batch-processing","title":"Batch Processing","text":"<p>In Unix systems, the exit status is useful when scripting or using batch processing. A batch script can check the exit status of various programs executed within it and take different actions based on the returned values.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#various-types-of-exit_status","title":"Various Types of exit_status","text":"<p>In C and C++, the exit status is an integer value that can be returned by the <code>main</code> function to indicate the status or outcome of the program\u2019s execution. While there are no strict rules or predefined constants for exit status values, certain conventions are often followed to convey specific information about the program\u2019s termination. Here are some common exit status conventions:</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#success","title":"Success","text":"<p>Typically, an exit status of <code>0</code> is used to indicate the successful execution of the program. This is considered the \u201csuccess\u201d status, and it indicates that the program completed its task without any errors.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#general-errors","title":"General Errors","text":"<p>Exit status values greater than <code>0</code> (usually positive) are used to indicate different types of errors. The specific values and their meanings can vary based on the program\u2019s design and the developer\u2019s choice. For example:</p> <ul> <li><code>1</code>: General error code.</li> <li><code>2</code>: Misuse of shell commands (e.g., incorrect command-line arguments).</li> <li><code>3</code>: An input file couldn\u2019t be opened.</li> <li><code>4</code>: An output file couldn\u2019t be written.</li> <li><code>5</code>: A required library or resource is missing.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#signals","title":"Signals","text":"<p>Apart from explicitly returning an integer value, the operating system can also terminate a program due to receiving certain signals. In Unix-like systems, signals are represented by small positive integers. For example:</p> <ul> <li><code>SIGINT</code>(2): Termination signal from the keyboard (e.g., when the user presses Ctrl+C).</li> <li><code>SIGSEGV</code>(11): Invalid memory access (segmentation fault).</li> <li><code>SIGTERM</code>(15): Termination signal.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/Exit%20Status/#reserved-values","title":"Reserved Values","text":"<p>Some operating systems may have reserved exit status values for special purposes or to represent specific conditions. These values are not part of the official C/C++ standard but might be used for specific applications or platforms.</p> <p>It\u2019s important to note that the specific exit status values and their meanings are not standardized across all programs or operating systems. Developers are free to choose exit status values that best represent the outcome of their program\u2019s execution. However, adhering to common conventions and using meaningful exit status values can help other developers, scripts, and tools understand the program\u2019s status more easily.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/auto/","title":"auto","text":"<p>Complete Documentation from: cppreference.com</p> <p>We use auto where we don\u2019t have a specific reason to mention the type explicitly. \u201cSpecific Reasons\u201d include:</p> <ul> <li>The definition is in a large scope where we want to make the type clearly visible to readers of our code.</li> <li>We want to be explicit about a variable\u2019s range or precision. (e.g.\u00a0double rather than float)</li> <li>We want to avoid redundancy and writing long type names. (e.g.\u00a0std::chrono has really long type names)</li> <li>When we want to write in generic programming mode where the exact type of an object can be hard for programmers to know.</li> </ul> <p>Special Note: <code>auto</code> is a feature that helps you to improve readibility. Use it wisely and only when needed. Don\u2019t use auto everywhere as it will make it difficult for people to understand data types for simple things too.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/","title":"new keyword","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/#notes","title":"Notes","text":"<p>The <code>new</code> keyword is C++ equivalent of <code>malloc()</code> from C along with the added benefit of calling the constructor when used with a class. Using new allows you to allocate memory on Heap.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/#how-the-new-keyword-works","title":"How the new keyword works?","text":"<ol> <li>On calling <code>new</code>, the new keyword takes the size needed to be loaded in the memory as input.</li> <li>It searches through the heap to find a continuous block of memory as required.</li> <li>After successfully finding the block of memory, it returns the pointer to the memory.</li> </ol>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/#how-to-load-a-variable-on-heap","title":"How to load a variable on heap?","text":"<pre><code>int *var = new int;\n</code></pre> <p>The <code>var</code> will store the pointer to the heap memory where the value can be stored. It will be of 4 bytes. (size of int = 4 bytes)</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/#how-to-load-a-block-of-memory","title":"How to load a block of memory?","text":"<pre><code>int *b = new int[50]; //200 bytes\n</code></pre> <p>Using <code>[]</code> brackets will allocate 50 block of memory with the size of int. This will be 200 bytes. (50 blocks of size of int = 50 x 4 = 200 bytes)</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/#important-things-to-know-before-using-new","title":"Important Things to know before using new","text":"<ul> <li> <p>Always clear the memory after the scope of <code>new</code> is complete. Since the memory is allocated in heap, it does not auto delete. Clear the memory using <code>delete</code> keyword as follows:</p> <pre><code>int *a = new int;\ndelete a;//Since A single block of memory is allocated//clear directly using delete keyword\n\nint *b = new int[50];\ndelete[] b;// Remember to use [] next to delete if you want to clear all the memory blocks.// If you don't use [], it will only clear the first block of memory\n</code></pre> </li> <li> <p>For a class, though <code>new</code> in C++ it equivalent to <code>malloc</code> in C, do not use them interchangeably. <code>malloc()</code> just returns pointer to the memory block when you use it with a class. <code>new</code> returns the pointer and also initializes the object for the class.</p> </li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Keywords/new/#resources","title":"Resources","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/","title":"Debugging","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#compiler-based-debugging-g","title":"Compiler Based Debugging (G++)","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#visual-debugging","title":"Visual Debugging","text":"<ul> <li>Wall Flag: show all warnings. It turns on all standard C++ warnings about code that might cause unexpected or undefined behaviour.</li> <li>Wextra\u00a0flag: enables some extra warnings not turned on by\u00a0Wall. These include warnings for the bad pointer to integer zero comparisons, base class not initialized in the copy constructor of the derived class, etc.</li> <li>Wfatal-errors flag:\u00a0is similar to\u00a0Wall but treats an error as fatal and stops before dumping a long list of errors into the terminal. This flag is useful when you want to sequentially solve the bugs as only one warning error pops up at a time.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#manual-debugging","title":"Manual Debugging","text":"<ul> <li>-D _DEBUG macro: Define the DEBUG* Preprocessor while compiling with G++ which can be used to execute specific lines of code only when the -D Flag is passed.</li> </ul> <pre><code>float PI = 3.1415;\n#ifdef DEBUG\nstd::cout&lt;&lt; \"Pi is: \"&lt;&lt; PI&lt;&lt;\"\\n\";\n#endif\n</code></pre> <p>This portion of the code will output the value of PI only when the DEBUG Macro is defined using flags in g++.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#interactive-gdb-based-debugging","title":"Interactive GDB Based Debugging","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#manual-debugging_1","title":"Manual Debugging","text":"<ul> <li>g flag: Compile the program first using this flag alongside others.</li> </ul> <pre><code>g++ -g prog.cpp -o prog\n</code></pre> <ul> <li>Once the compilation completes, run your code with gdb using</li> </ul> <pre><code>gdb ./prog\n</code></pre> <ul> <li>Once the initialization is completed, type run</li> <li>Ctrl+L clears the terminal.</li> <li>Type start to initialize debugging.</li> <li>Type next to go to the next line.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#ide-based-debugging","title":"IDE Based Debugging","text":"<ul> <li>Better and interactive debugging can be done using VSCode</li> <li>Set up the launch.json with the correct flags for debugging rules.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Debugging/#resources","title":"Resources","text":"<ul> <li>G++ Cheatsheet</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Makefile/","title":"Makefile","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Makefile/#about","title":"About","text":"<p>The purpose of Makefile is to build the code for you. This helps you to avoid making errors in compiling code every time you need to process a file.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Makefile/#resources","title":"Resources","text":"<ul> <li>Make File Official Documentation: GNU make</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/","title":"Project Setup","text":"","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#file-structure","title":"File Structure","text":"<p>The Most Basic structure of a c++ porject looks as follows:</p> <pre><code>\u276f tree -L 1\n[ 332]  ./\n\u251c\u2500\u2500 [ 346]  build/\n\u251c\u2500\u2500 [   0]  ext/\n\u251c\u2500\u2500 [   0]  include/\n\u251c\u2500\u2500 [  16]  src/\n\u251c\u2500\u2500 [   0]  tests/\n\u251c\u2500\u2500 [ 518]  vcpkg/\n\u251c\u2500\u2500 [ 186]  CMakeLists.txt\n\u251c\u2500\u2500 [  82]  compile_commands.json -&gt; /home/parth/Desktop/programming/cpp/learncpp.com/chap0/build/compile_commands.json\n\u251c\u2500\u2500 [   0]  README.md\n\u251c\u2500\u2500 [4.1K]  tasks.py\n\u251c\u2500\u2500 [ 348]  vcpkg-configuration.json\n\u2514\u2500\u2500 [  38]  vcpkg.json\n</code></pre>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#organization","title":"Organization","text":"","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#systems","title":"Systems","text":"<ol> <li><code>CMake</code> : Used to generate Build System Configurations.</li> <li><code>Ninja</code> : Build system to compile the project.</li> <li><code>gcc</code> : Compiler for the project.</li> <li><code>vcpkg</code> : Package Manager for C/C++. Should be added as submodule to your project.</li> <li><code>invoke</code> : Python Library to run the Cmake Configurations.</li> </ol>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#folders","title":"Folders","text":"<ol> <li><code>build/</code> : Stores the build files and executables</li> <li><code>ext/</code> : Stores external libraries</li> <li><code>include/</code> : Stores the <code>.h</code> and <code>.hpp</code> header files made by us.</li> <li><code>src/</code> : Holds the <code>.c</code> and <code>.cpp</code> files made by us.</li> <li><code>tests/</code> : Holds the Tests for the codebase</li> <li><code>vcpkg/</code> : Holds Microsoft C++ Package Manager</li> </ol>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#files","title":"Files","text":"<ol> <li><code>CmakeLists.txt</code> : Contains the build guide for the codebase including pointing towards the needed libraries and compilation options.</li> <li><code>compile_commands.json</code> : Contains the Intellisense information for the IDEs.</li> <li><code>README.md</code> : Project Information for people to build and understand</li> <li><code>tasks.py</code> : Script containing <code>invoke</code> which makes it easier to call CMake with custom commmands.</li> <li><code>vcpkg.json</code> : Used by <code>vcpkg</code> to hold the libraries requested by user.</li> </ol>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#setup-process","title":"Setup Process","text":"<ol> <li> <p><code>mkdir &amp;&amp; cd</code> Project Directory</p> </li> <li> <p>Intialize Git     <pre><code>git init\n</code></pre></p> </li> <li>Add <code>vcpkg</code> as submodule to your project     <pre><code>git submodule add https://github.com/microsoft/vcpkg.git\ngit submodule update --init\ncd vcpkg\n./bootstrap-vcpkg.sh -disableMetrics\n</code></pre></li> <li>Add the essential libraries for the project using <code>vcpkg</code>:<ol> <li>Initialize <code>vcpkg</code>: <pre><code>vcpkg new --application\n</code></pre></li> <li>Add Libraries: <pre><code>vcpkg add port &lt;library_name&gt;\n</code></pre></li> </ol> </li> <li>Write the <code>CMakeLists.txt</code> for the project.</li> <li>Write the <code>tasks.py</code> <pre><code>\"\"\"\nThis requires invoke to be installed on the machine (not venv), which can be\ndone via:\n    yay -S python-invoke\n\"\"\"\nfrom datetime import datetime\nfrom hashlib import md5\nfrom pathlib import Path\nfrom shutil import rmtree as shutil_rmtree\nfrom typing import Optional\n\nfrom invoke import task\n\nPROJECT: str = \"chap0\"\nSRC_PATH: Path = Path(__file__).parent\nVCPKG_TOOLCHAIN = SRC_PATH / \"vcpkg/scripts/buildsystems/vcpkg.cmake\"\nWORKSPACE: Path = Path(\"/tmp/builds/cpp\")\nMD5: Optional[str] = None\nBUILD_PATH: Optional[Path] = Path(f\"{SRC_PATH}/build\")\nINSTALL_PATH: Optional[Path] = None\n\n\ndef get_md5(content: str) -&gt; str:\n    global MD5\n    if MD5 is None:\n        MD5 = md5(str.encode(content)).hexdigest()\n    return MD5\n\n\ndef get_cmake_workspace() -&gt; Path:\n    hash = get_md5(str(SRC_PATH))\n    return WORKSPACE / f\"{PROJECT}_{SRC_PATH.name}_{hash}\"\n\n\ndef get_build_path() -&gt; Path:\n    global BUILD_PATH\n    if BUILD_PATH is None:\n        BUILD_PATH = get_cmake_workspace() / \"build\"\n    return BUILD_PATH\n\n\ndef get_install_path() -&gt; Path:\n    global INSTALL_PATH\n    if INSTALL_PATH is None:\n        INSTALL_PATH = get_cmake_workspace() / \"install\"\n    return INSTALL_PATH\n\n\n@task\ndef info(c, topic=\"all\"):\n    \"\"\"Show project info.\"\"\"\n    if topic == \"all\":\n        print(f\"Project         = {PROJECT}\")\n        print(f\"Source path     = {SRC_PATH}\")\n        print(f\"Build path      = {get_build_path()}\")\n        print(f\"Install path    = {get_install_path()}\")\n    elif topic == \"build_path\":\n        print(get_build_path())\n    elif topic == \"install_path\":\n        print(get_install_path())\n    else:\n        print(\"Error: Valid 'topic' names are 'build_path'/'install_path'\")\n\n\n@task\ndef config(c):\n    \"\"\"Run cmake configure.\"\"\"\n    do_config(c)\n\n\ndef do_config(c):\n    build_path = get_build_path()\n    build_path.mkdir(parents=True, exist_ok=True)\n    cmd = [\n        \"cmake\",\n        \"-S\",\n        str(SRC_PATH),\n        \"-B\",\n        str(build_path),\n        \"-GNinja\",\n        \"-DCMAKE_BUILD_TYPE=RelWithDebInfo\",\n        \"-DCMAKE_EXPORT_COMPILE_COMMANDS=1\",\n        f\"-DCMAKE_TOOLCHAIN_FILE={str(VCPKG_TOOLCHAIN)}\",\n    ]\n    c.run(\" \".join(cmd), pty=True)\n\n    # Symlink compile_commands.json\n    src_ccdb_file = SRC_PATH / \"compile_commands.json\"\n    build_ccdb_file = build_path / \"compile_commands.json\"\n    if build_ccdb_file.exists():\n        if not src_ccdb_file.exists():\n            src_ccdb_file.symlink_to(build_ccdb_file)\n\n\n@task\ndef build(c, config=False):\n    \"\"\"Run builds via cmake.\"\"\"\n    build_path = get_build_path()\n\n    if not build_path.exists():\n        if config:\n            do_config(c)\n        else:\n            print(\"Error: build path doesn't exist.\")\n            return\n\n    cmd = [\"cmake\", \"--build\", str(build_path)]\n    c.run(\" \".join(cmd), pty=True)\n\n\n@task\ndef install(c):\n    \"\"\"Run install via cmake.\"\"\"\n    build_path = get_build_path()\n    install_path = get_install_path()\n\n    if not build_path.exists():\n        print(\"Error: build path doesn't exist.\")\n        return\n\n    cmd = [\"cmake\", \"--install\", str(build_path)]\n    c.run(\" \".join(cmd), env={\"DESTDIR\": install_path}, pty=True)\n\n\n@task\ndef clean(c):\n    \"\"\"Clean build directory.\"\"\"\n    # Don't clean during CppCon and the week before/after\n    _, week, _ = datetime.now().isocalendar()\n    if week in (36, 37, 38):\n        print(f\"I'm sorry I can't do that Dave as the current week is {week}.\")\n        return\n\n    build_path = get_build_path()\n    if build_path.exists():\n        shutil_rmtree(build_path)\n        print(f\"Cleaned {build_path}\")\n    else:\n        print(\"Build path absent. Nothing to do.\")\n\n\n@task(pre=[clean])\ndef clean_all(c):\n    \"\"\"Clean build and install directory.\"\"\"\n    install_path = get_install_path()\n    if install_path.exists():\n        shutil_rmtree(install_path)\n        print(f\"Cleaned {install_path}\")\n    else:\n        print(\"Install path absent. Nothing to do.\")\n\n\n@task\ndef ls(c):\n    \"\"\"List files using lsd and skip vcpkg and .cache folder\"\"\"\n    cmd = [\n        \"lsd\",\n        \"--tree\",\n        \"--ignore-glob vcpkg\",\n        \"--ignore-glob .cache\",\n    ]\n    c.run(\" \".join(cmd), pty=True)\n</code></pre></li> <li>Run the Invoke Command to configure and build your project for first time.     <pre><code>inv config build\n</code></pre>     This step will generate the <code>build</code> directory and the <code>compile_commands.json</code> which will help with project intellisense.</li> <li>Add <code>.clang-format</code> file in the root of the project. This file contains the guidelines to format the project. You can select the guidelines from one of the many poplular ones found here. Add one to your project as follows:     <pre><code>clang-format -style=google -dump-config &gt; .clang-format\n</code></pre></li> <li>Add <code>.clang-tidy</code> for Linting. It will help you provide diagnostics related to code errors, static analysis and code quality. Guide on clang-tidy can be found here. It can be added to project as follows:     <pre><code>---\n# Enable ALL the things! Except not really\n# misc-non-private-member-variables-in-classes: the options don't do anything\nChecks: \"*,\\\n  -google-readability-todo,\\\n  -altera-*,\\\n  -fuchsia-*,\\\n  fuchsia-multiple-inheritance,\\\n  -llvm-header-guard,\\\n  -llvm-include-order,\\\n  -llvmlibc-*,\\\n  -misc-non-private-member-variables-in-classes\"\nWarningsAsErrors: ''\nCheckOptions:\n  - key: 'bugprone-argument-comment.StrictMode'\n    value: 'true'\n# Prefer using enum classes with 2 values for parameters instead of bools\n  - key: 'bugprone-argument-comment.CommentBoolLiterals'\n    value: 'true'\n  - key: 'bugprone-misplaced-widening-cast.CheckImplicitCasts'\n    value: 'true'\n  - key: 'bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression'\n    value: 'true'\n  - key: 'bugprone-suspicious-string-compare.WarnOnLogicalNotComparison'\n    value: 'true'\n  - key: 'readability-simplify-boolean-expr.ChainedConditionalReturn'\n    value: 'true'\n  - key: 'readability-simplify-boolean-expr.ChainedConditionalAssignment'\n    value: 'true'\n  - key: 'readability-uniqueptr-delete-release.PreferResetCall'\n    value: 'true'\n  - key: 'cppcoreguidelines-init-variables.MathHeader'\n    value: '&lt;cmath&gt;'\n  - key: 'cppcoreguidelines-narrowing-conversions.PedanticMode'\n    value: 'true'\n  - key: 'readability-else-after-return.WarnOnUnfixable'\n    value: 'true'\n  - key: 'readability-else-after-return.WarnOnConditionVariables'\n    value: 'true'\n  - key: 'readability-inconsistent-declaration-parameter-name.Strict'\n    value: 'true'\n  - key: 'readability-qualified-auto.AddConstToQualified'\n    value: 'true'\n  - key: 'readability-redundant-access-specifiers.CheckFirstDeclaration'\n    value: 'true'\n# These seem to be the most common identifier styles\n  - key: 'readability-identifier-naming.AbstractClassCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ClassCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.ClassConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ClassMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ClassMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstantMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstantParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstantPointerParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstexprFunctionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstexprMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ConstexprVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.EnumCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.EnumConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.FunctionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalConstantPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalFunctionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.GlobalVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.InlineNamespaceCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalConstantPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalPointerCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.LocalVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.MacroDefinitionCase'\n    value: 'UPPER_CASE'\n  - key: 'readability-identifier-naming.MemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.MethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.NamespaceCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ParameterPackCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PointerParameterCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PrivateMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PrivateMemberPrefix'\n    value: 'm_'\n  - key: 'readability-identifier-naming.PrivateMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ProtectedMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ProtectedMemberPrefix'\n    value: 'm_'\n  - key: 'readability-identifier-naming.ProtectedMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PublicMemberCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.PublicMethodCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ScopedEnumConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.StaticConstantCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.StaticVariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.StructCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.TemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.TemplateTemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.TypeAliasCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.TypedefCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.TypeTemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.UnionCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.ValueTemplateParameterCase'\n    value: 'CamelCase'\n  - key: 'readability-identifier-naming.VariableCase'\n    value: 'lower_case'\n  - key: 'readability-identifier-naming.VirtualMethodCase'\n    value: 'lower_case'\n...\n</code></pre></li> <li>Commit the project and push to github.</li> <li>Exit the Neovim and restart again to trigger <code>clangd</code>. The <code>clangd</code> will look for <code>compile_commands.json</code> in the root of the project folder which will contain all the intellisense for the added packages and files.</li> </ol>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#usage","title":"Usage","text":"","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#intellisense","title":"Intellisense","text":"<p>For a correctly configured <code>lsp-zero</code> and <code>clangd</code>, the intellisense will be picked up automatically using the <code>compiled_commands.json</code> file.</p>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#clang-format","title":"clang-format","text":"<p>Set the <code>lsp-zero`` to autoformat buffer on save to apply formatting on saving and make sure to have</code>.clang-format` file in root of the project directory.</p>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#clang-tidy","title":"clang-tidy","text":"<p>You can either run <code>clang-tidy</code> manually or the <code>clangd</code> will automatically pick the <code>.clang-tidy</code> file from root of project and run it to the files on each buffer saves for linting and static analysis.</p>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#build","title":"Build","text":"<p>You can build the project by running:</p> <pre><code>inv build\n</code></pre> <p>This will save the build files in the folder <code>build/</code> and can be run from it.</p>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Project%20Setup/#resources","title":"Resources","text":"<ul> <li> C++ Coding with Neovim - Prateek Raman - CppCon 2022 </li> <li>vcpkg Setup Guide</li> <li>clang-format</li> <li>clang-tidy</li> </ul>","tags":[]},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Static%20Analysis/","title":"Static Analysis","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Static%20Analysis/#static-analysis-for-cc","title":"Static Analysis for C/C++","text":"<p>A static analysis acts like a proof-reader for your project. It performs various checks like grammer check in MS Word. It suggest ways to improve code flow, correct logical errors or reduce non-reachable parts of code. There are many options to integrate Static Analysis to your project. One of the opensource available option is <code>cppcheck</code>.</p> <p>You can integrate <code>cppcheck</code> in your Makefile to automate the checking.</p> <p>Install <code>cppcheck</code> on your system from a new terminal:</p> <pre><code>sudo apt-get install cppcheck\n</code></pre> <p>Amend the Makefile to integrate <code>cppcheck</code> as follows:</p> <pre><code># CPPCHECK\nCPPCHECK = cppcheck\nCPPCHECK_FLAGS = --quiet --enable=all --error-exitcode=1 --inline-suppr\n\ncppcheck:\n    $(CPPCHECK) $(CPPCHECK_FLAGS)\\\n        -I $(INCLUDE_DIR)\\\n        $(SOURCES)\n</code></pre>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Static%20Analysis/#resources","title":"Resources","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/","title":"Testing","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#types-of-testing","title":"Types of Testing","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#automated-testing","title":"Automated Testing","text":"<p>This is generally used to test the complete code at a single time.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#unit-testing","title":"Unit Testing","text":"<p>Testing small chunks of code at individually to ensure that portions or amendements in code work properly</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#available-testing-frameworks","title":"Available Testing Frameworks","text":"<ul> <li>Boost Test Library</li> <li>Catch 2</li> <li>CppUnit</li> <li>Google Test</li> <li>Microsoft Unit Testing Framework</li> <li>Parasoft C/C++ Test</li> <li>QtTest</li> </ul> <p>and many more\u2026.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#test-driven-development-tdd","title":"Test Driven Development (TDD)","text":"<p>Test-driven development is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases.</p>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#what-is-a-standard-tdd-cycle","title":"What is a standard TDD cycle?","text":"<ul> <li>Before writing any new code, write a new test.</li> <li>Just write enough new code to make the new test compile and fail (empty function).</li> <li>Run the test and watch it fail.</li> <li>Write new code required to make the test pass.</li> <li>Refactor the new code to prepare for the next cycle.<ul> <li>When you\u2019re done, the test should still pass.</li> </ul> </li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#google-test-framework","title":"Google Test FrameWork","text":""},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#google-test-framework-setup-in-vscode","title":"Google Test FrameWork Setup in VSCode","text":"<ul> <li>Install the <code>C++ Extension Pack</code> and <code>CMake Tools</code> Extension in VSCode.</li> <li>Install CMake on device if it is not installed.</li> <li>Establish the new C++ Project.</li> <li>Open a new terminal in VSCode and clone the googletest framework using</li> </ul> <pre><code>git clone https://github.com/google/googletest.git\n</code></pre> <ul> <li>Create a <code>CmakeLists.txt</code> file with the following setup</li> </ul> <pre><code>cmake_minimum_required(VERSION 3.8)\nset(This PROJECT_NAME)#Project Name hereproject(${This} C CXX)\nset(CMAKE_C_STANDARD -99)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nenable _testing()\nadd _subdirectory(googletest)\nset(Headers\n    Header_File.hpp #Header names here)\nset(Source\n    Header_File.cpp #Source names here)\nadd _library(${This} STATIC ${Sources} ${Headers})\nadd_subdirectory(test)\n</code></pre> <ul> <li>Generate the header and source files along with main file.</li> <li>Create the <code>test</code> folder and inside it generate the <code>CMakeLists.txt</code> file with the following code</li> </ul> <pre><code>cmake_minimum_required(VERSION 3.8)\nset(This Tests)\nset(Sources\n    Tests.cpp\n)\nadd_executable(${This} ${Sources})\ntarget_link_libraries(${This} PUBLIC\n    gtest_main\n    PROJECT_NAME\n)\nadd_test(\n    NAME ${This}    COMMAND ${This})\n</code></pre> <ul> <li>Generate <code>Tests.cpp</code> File in the <code>/test</code> folder in PROJECT DIRECTORY</li> <li>Reload VS Code.</li> <li>Select the default compiler for build system generation.</li> <li>Build the code and wait for it.</li> <li>After build is complete, look for file <code>/build/CMakeCache.txt</code> and find the tag <code>gtest_force_shared_crt:BOOL</code> and set the value to <code>ON</code>.</li> <li>From the CMake Tools Tab in the left, select <code>Clean Rebuild</code> and wait for no warnings.</li> <li>Click Ctrl+Shift+P and search for CMake: Run Tests. A default test will run and all will clear up.</li> </ul>"},{"location":"Study%20Notes/C%2B%2B%20Programming%20Guide/Tools/Testing/#resources","title":"Resources","text":""},{"location":"Study%20Notes/Control%20Systems/","title":"Control Systems","text":""},{"location":"Study%20Notes/Control%20Systems/#lecture-series","title":"Lecture Series","text":"<ul> <li>Controls Bootcamp - Steve Brunton</li> </ul>"},{"location":"Study%20Notes/Control%20Systems/#resources","title":"Resources","text":"<ul> <li>Suggested Textbooks</li> </ul>"},{"location":"Study%20Notes/Control%20Systems/Controls%20Bootcamp%20-%20Steve%20Brunton/","title":"Controls Bootcamp - Steve Brunton","text":""},{"location":"Study%20Notes/Control%20Systems/Controls%20Bootcamp%20-%20Steve%20Brunton/#overview","title":"Overview","text":"<ul> <li>Controls are of two types:<ul> <li>Passive Control: Control introduced in system due to design. Does not need additional energy to function. e.g. Truck shape introducing drag to keep it from lifting</li> <li>Active Control: Control introduced in system by use of external energy. Types:<ul> <li>Open Loop: No feedback in system which results in continuous inputs.</li> <li>Closed Loop: Introduces feedback system using sensors which can be used for minute control which varies based on output of the system.</li> </ul> </li> </ul> </li> </ul> <ul> <li>Why Feedback is needed?<ul> <li>Uncertainity: System often has uncertainity which renders preplanned input useless.</li> <li>Instability: System might be unstable due to external noise. Feedback can result in better control.</li> <li>Disturbance tends to pass through system dynamics and can be measured to improve control over it.</li> <li>Efficient: Introducing feedback results in overall lower energy consumption due to applied force being proportional to present error, thus reduces overall lower energy.</li> </ul> </li> </ul>"},{"location":"Study%20Notes/Control%20Systems/Controls%20Bootcamp%20-%20Steve%20Brunton/#important-topics","title":"Important Topics","text":"<ul> <li>Linear Systems</li> <li>Stability and Eigen Values</li> <li>Linearizing Around a Fixed Point</li> <li>Controllability</li> <li>Controllabiltiy, Reachability and Eigen Value Placement</li> <li>Controllability and the Discrete-Time Impulse Response</li> <li>Degree of Controllability and Gramians</li> <li>Controllability and PBH Test</li> <li>Cayley-Hamilton Theorem</li> <li>Reachability and Controllabilty with Cayley Hamilton</li> <li>Inverted Pendulum on a Cart</li> <li>Pole Placement for the Inverted Pendulum on a Cart</li> <li>Linear Quadratic Regulator(LQR) Control for the Inverted Pendulum on a Cart</li> <li>Motivation for Full-State Estimation</li> <li>Observability</li> <li>Full-State Estimation</li> <li>The Kalman Filter</li> <li>Linear Quadratic Gaussian (LQG)</li> <li>Robust Control</li> <li>Equivalent Representations of Linear Systems</li> <li></li> </ul>"},{"location":"Study%20Notes/Control%20Systems/Controls%20Bootcamp%20-%20Steve%20Brunton/#resources","title":"Resources","text":"<ul> <li>Reference Playlist: Control Bootcamp</li> </ul>"},{"location":"Study%20Notes/Docker/","title":"Docker","text":"<ul> <li>Basics</li> <li>Docker Componse</li> <li>Docker Networking</li> </ul>"},{"location":"Study%20Notes/Docker/Basics/","title":"Docker Basics","text":""},{"location":"Study%20Notes/Docker/Basics/#background","title":"Background","text":"<p>Docker is a platform used to develop, ship, and run applications inside containers. A container is a lightweight, standalone, and executable software package that includes everything needed to run a piece of software, including the code, runtime, system tools, libraries, and settings. Containers are isolated from each other and the host system.</p> <p>Here\u2019s a deeper dive into Docker and its advantages:</p> <ol> <li>What is Docker?<ul> <li>Containerization: Docker allows you to package an application and its dependencies into a single unit called a container. This container can be moved across different stages of development or different environments (like dev, staging, and production) ensuring consistency.</li> <li>Images and Containers: In Docker, an \u201cimage\u201d is a lightweight, stand-alone, executable software package that includes everything needed to run a piece of software. A \u201ccontainer\u201d is a running instance of an image.</li> <li>Docker Engine: This is the heart of Docker. It\u2019s responsible for creating, running, and managing containers.</li> <li>Docker Hub: A cloud-based registry where Docker users and partners can create, test, store, and distribute container images.</li> </ul> </li> <li>Why Use Docker?<ul> <li>Consistency: One of the most significant benefits of Docker is its ability to provide consistent environments. Developers can define the environment in which an application runs, which eliminates the \u201cit works on my machine\u201d problem.</li> <li>Isolation: Containers run in isolation, ensuring that they don\u2019t interfere with each other or with the host system. This makes it easier to manage dependencies and resources.</li> <li>Portability: Since containers encapsulate all the dependencies an application needs to run, they can be moved seamlessly across different stages of development or different environments.</li> <li>Efficiency: Containers are lightweight compared to traditional virtual machines because they share the host system\u2019s OS kernel, rather than needing their operating system.</li> <li>Version Control for Environments: Docker images can be versioned, allowing teams to track changes, roll back, and share versions among team members.</li> <li>Rapid Deployment: Containers can be started in seconds, making scaling, deploying, and rollback faster and more efficient.</li> <li>Integration and CI/CD: Docker fits well into continuous integration and continuous deployment (CI/CD) workflows. Changes can be packed into containers and tested as they progress through the pipeline, ensuring that each stage is tested in an environment that\u2019s identical to production.</li> </ul> </li> <li>Common Use Cases:<ul> <li>Microservices: Breaking down applications into smaller services that run in their containers.</li> <li>Development Environments: Ensuring that every developer works in a consistent environment.</li> <li>Testing: Quickly creating disposable instances of an application to run tests.</li> <li>Scaling &amp; Load Balancing: Easily scaling out applications by running multiple containers across multiple host machines.</li> <li>Rapid Deployment: Quickly rolling out features, patches, or updates.</li> </ul> </li> </ol> <p>In summary, Docker offers a solution to the problem of \u201chow to get software to run reliably when moved from one computing environment to another.\u201d This could be from a developer\u2019s local machine to a test environment, from a staging environment into production, or a physical machine in a data centre to a virtual machine in a private or public cloud.</p>"},{"location":"Study%20Notes/Docker/Basics/#basics","title":"Basics","text":""},{"location":"Study%20Notes/Docker/Basics/#installing-docker","title":"Installing Docker","text":"<p>Install docker in Ubuntu from a terminal using</p> <pre><code>sudo apt-get install docker.io\n</code></pre>"},{"location":"Study%20Notes/Docker/Basics/#common-helping-commands","title":"Common Helping Commands","text":"<ul> <li>List Docker Containers: <code>docker ps</code><ul> <li>Add <code>a</code> flag for stopped containers</li> </ul> </li> <li>List Images: <code>docker images</code></li> <li>Delete Docker Image: <code>docker rmi &lt;image-name&gt;</code></li> <li>Delete Docker Containers: <code>docker container &lt;container-name/container-id&gt;</code></li> <li>Docker Resource Utilization: <code>docker stats</code></li> </ul>"},{"location":"Study%20Notes/Docker/Basics/#pulling-an-image-from-dockerhub","title":"Pulling an Image from DockerHub","text":"<p>Syntax: <code>docker pull &lt;image-name:version&gt;</code></p> <p>If you don\u2019t mention version, the latest one is pulled. There is only one copy of each unique version of images you pull. So if you retry pulling the same image, it won\u2019t happen.</p> <p>Example: Pull the centOS from DockerHub</p> <pre><code>docker pull centos\n</code></pre> <p>Complete Docker Pull Guide: https://docs.docker.com/engine/reference/commandline/pull/</p>"},{"location":"Study%20Notes/Docker/Basics/#loading-an-image-into-a-container","title":"Loading an Image into a Container","text":"<p>Syntax: <code>docker run &lt;flags&gt; &lt;image-name&gt;</code> Return: Container ID</p> <p>Example: Running centOS Image with the name <code>cantcontainmyself</code></p> <pre><code>docker run -d -t --name cantcontainmyself centos\n</code></pre> <p>Here:</p> <ul> <li><code>-d</code>: Detached Mode - Run container in background and do not allow direct interaction with it.</li> <li><code>-t</code>: Allocate a pseudo-tty</li> <li><code>--name &lt;name&gt;</code>: Allows you to manually name a container which can help you to remember which container does what</li> </ul> <p>Complete Docker Run Guide: https://docs.docker.com/engine/reference/run/</p>"},{"location":"Study%20Notes/Docker/Basics/#executing-commands-in-the-container","title":"Executing Commands in the Container","text":"<p>Syntax: <code>docker exec &lt;flags&gt; &lt;container-id/container-name&gt;</code></p> <p>Example: Using <code>cantcontainmyself</code> container.</p> <pre><code>docker exec -it cantcontainmyself bash\n</code></pre> <p>Here: - <code>-i</code>: Interactive Mode - Keeps STDIN Open. ie You can input keyboard values to it. - <code>-t bash</code>: Allocate Pseudo-TTY of type bash. Exact tty type can be found using <code>docker ps</code>.</p> <p>Exit from container using <code>exit</code> keyword.</p> <p>Complete Docker Exec Guide: https://docs.docker.com/engine/reference/commandline/exec/</p>"},{"location":"Study%20Notes/Docker/Basics/#starting-and-stopping-containers","title":"Starting and Stopping Containers","text":"<ul> <li>Stop a running container using:<code>docker stop &lt;container-name&gt;</code></li> <li>Start a stopped container using: <code>docker start &lt;container-name&gt;</code></li> </ul>"},{"location":"Study%20Notes/Docker/Basics/#resources","title":"Resources","text":""},{"location":"Study%20Notes/Docker/Docker%20Networking/","title":"Docker Networking","text":"<p>Docker networking refers to the system and tools provided by Docker to facilitate communication and connectivity between containers, as well as between containers and the external world (such as the host machine, other containers, or external networks). Docker\u2019s networking capabilities enable containers to communicate with each other and with external services while maintaining isolation and security.</p>"},{"location":"Study%20Notes/Docker/Docker%20Networking/#types-of-docker-networking","title":"Types of Docker Networking","text":"<p>Docker offers several networking options to meet different requirements:</p> <ol> <li>Bridge Network: By default, Docker creates a bridge network on the host machine. Each container is connected to this bridge network by default. Containers on the same bridge network can communicate with each other using IP addresses and they can be accessed from the host machine as well. This network provides isolation and basic networking functionality.</li> <li>Host Network: Containers can share the network namespace with the host machine, allowing them to use the host\u2019s network stack directly. This option can provide better network performance but may compromise isolation to some extent.</li> <li>Overlay Network: Docker supports overlay networks, which are used for connecting containers running on different Docker hosts. This is particularly useful in distributed and clustered setups, such as when managing containers using Docker Swarm or Kubernetes.</li> <li>Macvlan Network: Macvlan allows containers to have their own MAC addresses, making them appear as separate physical devices on the network. This can be useful for scenarios where containers need to be directly accessible on the local network.</li> <li>Custom Bridge Network: Users can create their own custom bridge networks with specific configurations, allowing more control over container communication and connectivity.</li> <li>None Network: Containers can also be launched without network access, which can be useful for certain isolation scenarios.</li> <li>Port Mapping: Docker provides port mapping (port forwarding) to allow containers to expose and receive traffic on specific ports. This is essential for accessing containerized services from the host or external networks.</li> </ol> <p>Docker networking is a crucial aspect of containerization because it allows developers to build and deploy applications in isolated environments while ensuring they can communicate with each other and the outside world. Properly configuring Docker networking is important for achieving optimal performance, security, and scalability in containerized applications.</p>"},{"location":"Study%20Notes/Docker/Docker%20Networking/#basics","title":"Basics","text":"<p>Try running the command:</p> <pre><code>sudo docker network ls\n</code></pre> <p>This lists all the networks the Engine daemon knows about. This includes the networks that span across multiple hosts in a cluster. This will output:</p> <pre><code>root@localhost:~# sudo docker network ls\nNETWORK ID     NAME      DRIVER    SCOPE\n2d2ed734e75a   bridge    bridge    local\ndaf8213c0a1d   host      host      local\nabfb7773f8c2   none      null      local\n</code></pre> <p>Here: - <code>DRIVER</code> is equivalent to the Network Type we have in our system.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/","title":"Embedded Systems Hardware Design","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/#circuit-design-concepts","title":"Circuit Design Concepts","text":"<p>PCB Vias</p> <p>PCB Build-up and Stack-Up</p> <p>PCB Silkscreen and Solder Mask</p> <p>Proper Grounding</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/#debugging-protocols","title":"Debugging Protocols","text":"<p>SWD (Serial Wire Debug)</p> <p>JTAG (Joint Test Action Group)</p> <p>OpenOCD (Open On-Chip Debugger)</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/#electronics-concepts","title":"Electronics Concepts","text":"<p>ESD Protection</p> <p>Switching Regulators</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/#design-guides","title":"Design Guides","text":"<p>I2C Hardware Design</p> <p>Mastering motor control: implementation in C++ - Embedded</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/#software-guides","title":"Software Guides","text":"<p>Altium Designer</p> <p>Quetzal-1 Satellite Goes Open Source</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/Altium%20Designer%2023d9f7bb47af48cb8436fb0335fceecc/","title":"Altium Designer","text":"<p>Table of Content</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/Altium%20Designer%2023d9f7bb47af48cb8436fb0335fceecc/#resources","title":"Resources","text":"<p>Altium Designer Quick-Start Tutorial with Phil Salmony from Phil's Lab</p> <p>Altium Designer PCB Design Tutorial for Beginners (v20 and 21)</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/ESD%20Protection%207e2e5a752068431e86043a5af4a55bc7/","title":"ESD Protection","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/ESD%20Protection%207e2e5a752068431e86043a5af4a55bc7/#resources","title":"Resources","text":"<p>ESD Protection Basics - TVS Diode Selection &amp; Routing - Phil's Lab #75</p> <p>TVS Diodes &amp; ESD Suppression</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/I2C%20Hardware%20Design%2048bf6c7235da4408b7bd9670fcc357df/","title":"I2C Hardware Design","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/I2C%20Hardware%20Design%2048bf6c7235da4408b7bd9670fcc357df/#resources","title":"Resources","text":"<p>I2C Hardware &amp; PCB Design - Phil's Lab #132</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/JTAG%20%28Joint%20Test%20Action%20Group%29%20d244b14cd7654562849b579552995ef6/","title":"JTAG (Joint Test Action Group)","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/JTAG%20%28Joint%20Test%20Action%20Group%29%20d244b14cd7654562849b579552995ef6/#about","title":"About","text":"<ul> <li>Traditional Connection for debug for ARM 7/9 family</li> <li>Needs 4 pins minimum</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/JTAG%20%28Joint%20Test%20Action%20Group%29%20d244b14cd7654562849b579552995ef6/#references","title":"References","text":"<p>https://www.corelis.com/education/tutorials/jtag-tutorial/what-is-jtag/</p> <p>https://www.reddit.com/r/embedded/comments/x9461f/learning_to_get_the_full_use_of_jtag/</p> <p>https://www.xjtag.com/about-jtag/what-is-jtag/</p> <p>https://www.jtag.com/</p> <p>https://www.xjtag.com/about-jtag/jtag-a-technical-overview/</p> <p>https://www.allaboutcircuits.com/technical-articles/introduction-to-jtag-test-access-port-tap/</p> <p>https://digilent.com/shop/fpga-boards/programmers/?srsltid=AfmBOorCLSFXmAjyaryBZcczgflfPzPOMZ_gw2r4etvK6CyT2OLA1X0h</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/OpenOCD%20%28Open%20On-Chip%20Debugger%29%202931c68dc0c1419f8db13405237cb134/","title":"OpenOCD (Open On-Chip Debugger)","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/OpenOCD%20%28Open%20On-Chip%20Debugger%29%202931c68dc0c1419f8db13405237cb134/#about","title":"About","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/OpenOCD%20%28Open%20On-Chip%20Debugger%29%202931c68dc0c1419f8db13405237cb134/#resources","title":"Resources","text":"<p>https://www.udemy.com/course/microcontroller-embedded-c-programming/learn/lecture/16686766#overview</p> <p>https://openocd.org/</p> <p>https://www.youtube.com/watch?v=_1u7IOnivnM</p> <p>https://kickstartembedded.com/2024/03/26/openocd-one-software-to-rule-debug-them-all/</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Build-up%20and%20Stack-Up%20090d39b4318f4be6aba429c006fd9f92/","title":"PCB Build-up and Stack-Up","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Build-up%20and%20Stack-Up%20090d39b4318f4be6aba429c006fd9f92/#concepts","title":"Concepts","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Build-up%20and%20Stack-Up%20090d39b4318f4be6aba429c006fd9f92/#build-up","title":"Build-Up","text":"<p>Build-up related to the physical construction of the board. Primary things to consider are:</p> <ul> <li>Layer Count</li> <li>Dielectric Materials<ul> <li>Prepreg</li> <li>Core</li> </ul> </li> <li>Copper foil</li> <li>Manufacturability</li> <li>IPC Class</li> <li>HDI</li> <li>Surface Finish</li> </ul> <p></p> <p>Layer Count</p> <ul> <li>Defined by Routing Constraints, Density, Package Types, Power Delivery</li> <li>Constrains overall minimum thickness of PCB</li> <li>Standard is 1.6mm PCB and limited to 10-12 Layers</li> <li>Depends on the PCB Stack-up</li> </ul> <p>Prepreg (Pre-impregnated)</p> <ul> <li>Layer of fiberglass impregnated with resin (e.g. FR4)</li> <li>Sandwiched between layers of copper planes/traces</li> <li>Defined by dielectric constant (\\(\\epsilon_{r}\\)) and thickness.</li> <li>Main Task is to provide isolation between two copper layers or traces. It is helpful in laying down copper traces in a layer where the copper is in form of traces and needs support.</li> </ul> <p>Core</p> <ul> <li>Pre-pressed layers consisting of:</li> </ul> <pre><code>Copper Foil\n---------------\nCore Dielectric\n---------------\nCopper Foil\n</code></pre> <ul> <li>This is the innermost layer of the PCB and it\u2019s main job is to provide rigidity to the PCB.</li> </ul> <p>Copper Foil</p> <ul> <li>Defined primarily by copper weight/thickness.</li> <li>Two types:<ul> <li>Outer Layer: Typically thicker (1 oz is standard and max is ~ 8 oz)</li> <li>Inner Layer: Typically thinner (1/2 oz is standard and max is ~ 1 oz)</li> </ul> </li> <li>Main deciding factor is current handling capacity:<ul> <li>For Outer Layer, 1 mm traced (allowed 20 deg C temperature rise) \u2192 1/2 oz: 1.9A, 1 oz: 3.2 A</li> <li>Saturn PCB Toolkit can help in finding the appropriate layer width</li> </ul> </li> </ul> <p>Manufacturability</p> <ul> <li>Always talk to the PCB Manufacturer and inquire about the \u2018standard N-Layer\u2019 build-ups they can manufacture</li> <li>General rule of thumb is to make the design with manufacturability in mind and keep tolerances as lenient as possible till it does not hamper the design to have maximum chances of manufacturability and least possible error.</li> <li>Communicate with manufacturer if you need some special tolerances.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Build-up%20and%20Stack-Up%20090d39b4318f4be6aba429c006fd9f92/#stack-up","title":"Stack-Up","text":"<p>Board Stack-up focuses on the electrical type of each layer of PCB. It provides the basis for:</p> <ul> <li>Determining the number of layers in the board</li> <li>Assigning GND, PWR, or SIGNAL to the individual layers</li> <li>Layers can have a mix of SGN/PWR or PWR/GND or any possible combination unless it does not interfere with the circuit performance.</li> </ul> <pre><code>     |-----------------------------------------------|\nL1   |                    Signal                     |\n     |-----------------------------------------------|\nL2   |                    Ground                     |\n     |-----------------------------------------------|\nL3   |                    Ground                     |\n     |-----------------------------------------------|\nL4   |                    Signal                     |\n     |-----------------------------------------------|\n</code></pre> <ul> <li>Signal Layers are generally built using traces</li> <li>GND/PWR layers are generally large planes to provide low resistance pathways for current to flow through</li> </ul> <p>Layer Types</p> <ul> <li>GND: Used as a reference plane/layer for signal traces an power pours/traces.</li> <li>PWR: For Power distribution, critical for high speed circuits. Together with GND layers forms \u2018parallel plate capacitors\u2019. Circuit often tend to have different volage planes on \u2018PWR\u2019 Layer.</li> <li>SIG: Predominantly trace layers (\u2019forward path\u2019) using a GND or PWR layer for reference(\u2019return path\u2019)</li> </ul> <p>Sensibly Assign Layer Types</p> <p>Goals of a good stack up are:</p> <ul> <li>Wanting a systematic approach to deciding stack up</li> <li>Ensure Good EMC/EMI performance</li> <li>Ensure good signal integrity</li> <li>Ensure good power delivery</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Build-up%20and%20Stack-Up%20090d39b4318f4be6aba429c006fd9f92/#golden-rules","title":"Golden Rules","text":"<ul> <li>For AC or high frequency DC (above ~kHz), return path is directly underneath forward path. So a good idea idea is to have traces or GND Planes directly below the forward trace/plane.</li> <li>Signal Energy flows between copper layers in High Frequency DC/AC. i.e. keep these layers as close as possible.</li> <li> <p>Avoid Fields from Spreading</p> <p></p> <ul> <li>Spreading fields means coupling from signal to signal \u2192 Crosstalk</li> <li>Spreading fields means some form of unwanted radiation \u2192 EMI</li> <li>Can be reduced by placing GND directly below signal lines</li> <li>Shielding Signals from both sides using GND Planes/traces.</li> <li>Power Planes: Keeping PWR/GND planes close to each other ensures high capacitance and low inductance in the dielectric. This ensures better power delivery performance.</li> <li>Put PWR Layer close to high speed IC as it reduces inductances for improved power delivery</li> <li>Keep Signal Layers separated by GND layer to avoid SIG-SIG coupling field or cross talk.</li> <li>Use stitching vias between different GND planes to maintain similar potential</li> <li>Use GND Vias next to transfer vias to provide the signal transmission path.</li> <li>Keep One GND Layer close to any one PWR layer for good power delivery.</li> </ul> </li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Build-up%20and%20Stack-Up%20090d39b4318f4be6aba429c006fd9f92/#resources","title":"Resources","text":"<p>PCB Stack-Up and Build-Up - Phil's Lab #56</p> <p>Ultimate Guide To PCB Prepregs: VS Core VS Laminate. - Jhdpcb</p> <p>Saturn PCB Design Toolkit Version 8.37</p> <p>Multilayer PCB Stack-up Basics | PCB Knowledge</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Silkscreen%20and%20Solder%20Mask%2013a60af4ac634240a907b43000cfad57/","title":"PCB Silkscreen and Solder Mask","text":"<p>Table of Content</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Silkscreen%20and%20Solder%20Mask%2013a60af4ac634240a907b43000cfad57/#concepts","title":"Concepts","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Silkscreen%20and%20Solder%20Mask%2013a60af4ac634240a907b43000cfad57/#resources","title":"Resources","text":"<p>PCB Silkscreen &amp; Solder Mask 101 - Phil's Lab #133</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/","title":"PCB Vias","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#basics","title":"Basics","text":"\u23f0 **Vias are Vertical connections in the third dimension(Z) of a PCB**   <ul> <li>Used for connection between layers allowing traces to \u2018jump\u2019 between layers in PCB.</li> <li>Can be used to improve air circulation around PCB for better thermals.</li> <li>Can be used to reduce eddy-current in the circuit if it is an issue.</li> <li>Generally \u2018tiny\u2019 through holes.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#parameters","title":"Parameters","text":"<ul> <li>Minimum Drill Size and Annular Ring Size are provided by the manufacturer based on their machine specifications.</li> </ul>  \u26a0\ufe0f It is always suggested to set the PCB software minimum tolerances higher than manufacturer tolerances to avoid the risk of error in manufacturing."},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#current-handling","title":"Current Handling","text":"<p>For a general rule of thumb:</p> <p>1 X Via \u2192 1.5 Amps (~regardless of size)</p> <p>For higher currents, simply use multiple vias in parallel.</p> <p>Use Saturn Toolkit to choose the right via for current handling.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#terminologies","title":"Terminologies","text":"<ul> <li>Pad Size: Total Diameter of the Via</li> <li>Drill Size: Size of the hole via</li> <li>Annular Ring: The Metal Pad around the Via</li> <li>Tenting: Covering your \u2018via' using a Solder Mask. Uncovered Via can be used as Test Points or Cooling. Cover Vias provide better temper protection and waterproofing.</li> <li>Filling:</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#placement","title":"Placement","text":"<p>TO-DO:</p> <ul> <li>Keep adequate distance between vias and traces to avoid manufacturing failure. Minimum Distance is provided by the Manufacturer's Guideline for PCB.</li> <li>Keep Different signals vias as far as possible to avoid coupling issues between signals.</li> </ul> <p>Power/GND Vias</p> <ul> <li>Keep as close to the IC Pad as Possible</li> <li>Keep the Width of Via the same as the trace width</li> <li>Keep Ground and Power Pad close to each other to reduce inductance.</li> </ul> <p>Differential Pair Vias</p> <ul> <li>Keep them as close as possible keeping the manufacturing tolerance in mind.</li> <li>Keep in mind that close vias don\u2019t cut the other layers into different groups.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#voiding","title":"Voiding","text":"<ul> <li>This is the issue caused because vias have an isolation ring around the annular ring to separate a layer from the via. This can result in the issue of cutting a plane into parts or causing small island formation if vias are kept too close to each other.</li> <li>Voiding can result in high-impedance routes and EMI introduction in high-frequency circuits.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#transfer-vias","title":"Transfer Vias","text":"<p>Transfer Vias are needed when we are using Vias for high-frequency signals ( &gt;20 kHz ) which can result in the introduction of noise if not coupled well Ground Plane.</p> <p>TO-DO:</p> <ul> <li>Place a Ground Via near a Signal Vias to provide better coupling.</li> <li>Multiple Transfer Vias can share a common ground \u2018via\u2019 if they are nearby.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#stitching-vias","title":"Stitching Vias","text":"<p>Vias are used to connect similar types of planes and create them as a single unit.</p> <p>Reasons:</p> <ul> <li>Connecting multiple GND/PWR layers has the following benefits:<ul> <li>Reduces Inductances</li> <li>Ensures Copper Islands don\u2019t act as antennae, resonate, and radiate.</li> <li>Reduces Eddy Current due to reduced surface area.</li> </ul> </li> <li> <p>Shielding: Stitching vias can be used for shielding to suppress the energy of electromagnetic waves up to a certain frequency from entering/leaving a section of the PCB. The stitching via distance can be calculated using:</p> \\[ L = \\frac{1}{20}*\\frac{c}{\\sqrt{\\epsilon}f_{max}}  \\] </li> </ul> <p>TO-DO:</p> <ul> <li>Stich the Power Places at certain intervals.</li> <li>To reduce shielding, calculate minimum distance and place the vias around high frequency circuit areas.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/PCB%20Vias%207f8bc84528d841c4aebebf2898b7fa27/#resources","title":"Resources","text":"<p>PCB Vias 101 - Phil's Lab #77</p> <p>Saturn PCB Design Toolkit Version 8.37</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/Proper%20Grounding%2029c4a0aca86744a6bbf811380102f79c/","title":"Proper Grounding","text":"<p>Table of Content</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/Proper%20Grounding%2029c4a0aca86744a6bbf811380102f79c/#resources","title":"Resources","text":"<p>[LIVE] How to Achieve Proper Grounding - Rick Hartley - Expert Live Training (US)</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/SWD%20%28Serial%20Wire%20Debug%29%207feef45b94eb419795c24bbddf9daf10/","title":"SWD (Serial Wire Debug)","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/SWD%20%28Serial%20Wire%20Debug%29%207feef45b94eb419795c24bbddf9daf10/#about","title":"About","text":"<ul> <li>2 wire protocol to access the ARM debug interface. Alternate to JTAG.</li> <li>Defines in ARM Debug Interface Specification V5</li> <li>2 Lines + 1 (Optional):<ul> <li>SWDIO: Bidirectional Data Line</li> <li>SWCLK: Clock driven by the host</li> <li>SWDO: Trace Pin for Communication</li> </ul> </li> <li>Useful to program MCUs internal Flash, Access Memory Regions, Add Breakpoints, stop/run CPU</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/SWD%20%28Serial%20Wire%20Debug%29%207feef45b94eb419795c24bbddf9daf10/#important-information","title":"Important Information","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/SWD%20%28Serial%20Wire%20Debug%29%207feef45b94eb419795c24bbddf9daf10/#stm32-family","title":"STM32 Family","text":"<ul> <li>They have a FIFO inside their ITM unit which serializes the data and sends it out via the SWO Pin.</li> <li>Make this change in the <code>` to enable the</code>printf` via SWO pin.|  Change: https://github.com/niekiran/Embedded-C/blob/master/All_source_codes/target/itm_send_data.c | Guide: https://www.udemy.com/course/microcontroller-embedded-c-programming/learn/lecture/16546068#overview</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/SWD%20%28Serial%20Wire%20Debug%29%207feef45b94eb419795c24bbddf9daf10/#references","title":"References","text":"<p>https://developer.arm.com/documentation/101636/0100/Debug-and-Trace/JTAG-SWD-Interface</p> <p>https://community.silabs.com/s/article/serial-wire-debug-swd-x?language=en_US</p> <p>https://wiki.segger.com/Target_Interface_SWD</p> <p>https://infocenter.nordicsemi.com/index.jsp?topic=/nwp_034/WP/nwp_034/nwp_034_swd_if.html</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/Switching%20Regulators%20346c05b9fd82492e99cd88a60506af55/","title":"Switching Regulators","text":"<p>Table of Content</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Hardware/Switching%20Regulators%20346c05b9fd82492e99cd88a60506af55/#resources","title":"Resources","text":"<p>Switching Regulator PCB Design - Phil's Lab #60</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/","title":"Embedded Systems Software Design","text":"<p><code>.elf</code> \u2192 (Executable and Linkable Format) Good for debugging. Do not use for production</p> <p><code>.bin/.hex</code> \u2192 (Binary/Hexadecimal) Good for Production</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/#design-guides","title":"Design Guides","text":"<p>Design from Scratch using Custom Makefiles and Register Programming</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/#communication-protocols","title":"Communication Protocols","text":"<p><code>C</code>ontroller Area Network Bus Protocol</p> <p>EtherCAT Protocol</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/#book-notes","title":"Book Notes","text":"<p>Programming Embedded Systems In C and C++</p> <p>F\u00b4 A Flight Software and Embedded Systems Framework</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/AVR-C%20Neovim%20Setup/","title":"AVR-C Neovim Setup","text":"","tags":[]},{"location":"Study%20Notes/Embedded%20Systems%20Software/AVR-C%20Neovim%20Setup/#setup","title":"Setup","text":"","tags":[]},{"location":"Study%20Notes/Embedded%20Systems%20Software/AVR-C%20Neovim%20Setup/#makefile","title":"Makefile","text":"<pre><code>:default:\n    avr-gcc -Os -DF_CPU=16000000UL -mmcu=atmega328p -nostdinc -ffreestanding -isystem/usr/avr/include -c -o main.o main.c\n    avr-gcc -o main.bin main.o\n    avr-objcopy -O ihex -R .eeprom main.bin main.hex\n    sudo avrdude -F -V -c arduino -p ATMEGA328P -P /dev/ttyUSB0 -b 115200 -U flash:w:main.hex\n</code></pre>","tags":[]},{"location":"Study%20Notes/Embedded%20Systems%20Software/AVR-C%20Neovim%20Setup/#lsp","title":"LSP","text":"<p>Enable LSP by generating compiledb as follows:</p> <pre><code>compiledb make\n</code></pre>","tags":[]},{"location":"Study%20Notes/Embedded%20Systems%20Software/Controller%20Area%20Network%20Bus%20Protocol%20ed6cdc911e1c4225a9146f5499d791d0/","title":"Controller Area Network Bus Protocol","text":"<p>CAN: <code>C</code>ontroller <code>A</code>rea <code>N</code>etwork Protocol</p> <p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Controller%20Area%20Network%20Bus%20Protocol%20ed6cdc911e1c4225a9146f5499d791d0/#concepts","title":"Concepts","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Software/Controller%20Area%20Network%20Bus%20Protocol%20ed6cdc911e1c4225a9146f5499d791d0/#resources","title":"Resources","text":"<p>CAN Bus protocol</p> <p>Can someone explain how to use CANBUS protocol?</p> <p>CAN Bus: A Beginners Guide Part 1</p> <p>CAN Bus: A Beginners Guide Part 2</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/","title":"Design from Scratch using Custom Makefiles and Register Programming","text":"<p>The complete guide was written with the MCU MSP430 in mind to be specific. Still, the process remains the same for any other MCU with simply the instruction set and compiler commands changing for specific brands of MCU.</p> <p>Test Project is displayed here: parth-20-07/Micro-Sumo-Bot</p> <p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#about","title":"About","text":"<p>The complete documentation is done based on the guide provided on the YouTube channel Artful Bytes. He has created a wonderful step-by-step video guide if you need to follow it.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#picking-parts-for-system","title":"Picking Parts for System","text":"<p>Guide: Picking the Parts for a Small Robot</p> <ol> <li>(Idea/Goal) List the most essential tasks for the design with the goals in mind. These are generally given by the client based on the end goal that the product needs to achieve. e.g.\u00a0For a Sumo Robot, the tasks are:<ol> <li>Locate Enemy</li> <li>Push Enemy Out</li> <li>Stay inside dojo</li> </ol> </li> </ol> <pre><code>![Design from Scratch using Custom Makefiles and Reg 6f43a806ee5b46ef9cac332e5f0fc132/Idea.png](Design from Scratch using Custom Makefiles and Reg 6f43a806ee5b46ef9cac332e5f0fc132/Idea.png)\n</code></pre> <ol> <li> <p>(Requirements) Set down rigid requirements for the design. These are generally given by the client based on their feasibility or usage e.g.</p> <ol> <li>Side of design</li> <li>Autonomous</li> <li>Remote Start</li> <li>Cannot damage other robots/platform</li> <li>No suction</li> <li> <p>Battery Life should minimum be 3 mins</p> <p></p> </li> </ol> </li> <li> <p>(Design/Part Selection) Based on the goals, look for the actuators/sensors needed as input/output. Based on the needed sensors and actuators, decide on the MCU that can handle the required peripheral load and matches the power ratings.</p> <p>A thought process can look like this when you sketch it out:</p> <pre><code>flowchart LR\n\nA[Which Motor?, How Many?] --&gt; B{What type of motion do I need to perform}\nB --&gt; |Precise| C(Servo Drive)\nC --&gt; |Non-Precise| D(Continuous Drive)\n\nE[Power to Device] --&gt; F{Device is stationary?}\nF --&gt; |Stationary?|G{Constant Supply available?}\nF --&gt; |Mobile?|H(DC)\nG --&gt; |Yes|I(AC)\nG --&gt; |NO|J(DC)</code></pre> <p>(This is just a sample thought process and this needs to be extended much furthur to choose each parts like sensor types and exact model based on requirements.)</p> <p></p> </li> <li> <p>Take a look at the peripherals and their datasheet to know the safety and operating power ranges (V, I and P all included) and search for interfacing circuits between MCU and Peripherals in case of different standards or limits.</p> </li> <li>Factors to choose MCU:<ol> <li>Peripheral Requirments: How many GPIO/I2C/SPI, etc are needed for basic design?</li> <li>Speed of the controller: Precise operation needs processors with higher frequency than less/none precise operations.</li> <li>Code Size: Large Size of codes will require higher amount of Flash Memory</li> <li>Community Support: Well documented MCU are better in terms of development as it helps in troubleshooting when you are stuck during development as many might have too before you and would had found solutions already.</li> <li>Power: How much power does it consume and is the voltage levels too different from other peripherals such that this would need a special power circuit?</li> <li>Price: For non-critical option, cheaper the better. For critical operations, reliability, quality and security of device functioning matters.</li> <li>Stock: You want the chip to be easily accessible anytime you want.</li> <li>Tools: Available tools to develop the project around the MCU.</li> </ol> </li> </ol>  \ud83d\udca1 Tips: If you don\u2019t have much experience with design, **Prototyping with experimentation &gt; Prototyping with Experience**.   <p></p> <p></p> <p></p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#design-choices-for-hardware","title":"Design Choices for Hardware","text":"<p>Guide: PCB Design Walkthrough Sumo Robot </p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#organization","title":"Organization","text":"<p>A good practise to organize the CAD Files for Hardware can be like this</p> <pre><code>.\n|-- imgs\n    |-- Manufactured PCB.jpg\n    |-- Board.jpg\n    |-- Schematics.pdf\n    |-- Schematic.png\n|-- libs\n    |-- 3d Models\n    |-- Footprints\n    |-- Symbols\n|-- manufacture\n    |-- Version\n        |-- Assembly\n            |-- BOM.csv\n            |-- CPL.csv\n        |-- Gerber\n|-- Design Files\n    |-- Schematics\n    |-- Board\n|-- .gitignore\n|-- LICENSE.md\n|-- README.md\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#design-choices","title":"Design Choices","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#time-vs-money","title":"Time vs Money","text":"<p>You have to choose prototyping the design. What are you more short on? Time or Money? If - Money:</p> <pre><code>You cannot go through many iterations, order every component you need and create a hand soldered version of the final design first to ensure minimal wastage of funds on redesign of PCB and reordering the manufactured parts.\n</code></pre> <ul> <li> <p>Time:</p> <p>If you are short on time, iterate through new designs as quick as possible. Make a design, order it pre-assembled from company and test it out. If something does not function properly, patch it manually and order a new design. You do not want to waste a lot of time tinkering. Use ready made versions of modules if allowed to reduce chances of failure. Focus your time between placing order and getting the assembled PCB on writing and improving firmware.</p> </li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#pre-assembled-modules-vs-custom-design","title":"Pre-assembled Modules vs Custom Design","text":"<p>Making a choice between designing everything in a single board vs using ready-made modules can be daunting.</p> <ul> <li>Pre-assembled:<ul> <li>Go for this approach if you are short on time.</li> <li>You have relaxed restrictions on size of the hardware. With relaxed size, a component hanging in air might not be an issue.</li> <li>You are not using a component module which relies on sturdy communication like I2C sensors which often tend to work even in a somewhat loose Header Situation unlike SPI based SD Modules.</li> </ul> </li> <li>Custom Design:<ul> <li>When customer/client asks for a custom design to avoid any sort of legal issues.</li> <li>You have tight board dimension restrictions</li> <li>Weak connections can cause severe points of failures.</li> </ul> </li> </ul>  \ud83d\udca1 Tips: Despite any choice you make while design, make sure to order the development board first before starting with any manufacturing, it allows you to have a first hand experience for trying out your firmware to ensure compatibility and noise mitigation required between MCU and peripherals."},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#install-an-ide-and-perform-hello-world","title":"Install an IDE and Perform Hello World","text":"<p>Guide: Install and IDE and Blink an LED </p> <p>While developing Software for embedded systems, you need to handle a lot of different programs to convert the .cpp file into binary suitable for target hardware. This work can be avoided if you use an IDE. An IDE provides a GUI based interface (generally) which will allow you to focus more on programming and less on background processes which might be great for someone who just wants to focus on Firmware and not on optimzation of backend compilation.</p> <p>Every brand of MCU tends to have its own IDEs like:</p> <ul> <li>STM32CubeMX/STM32CubeIDE for STM32 Boards</li> <li>Arduino IDE for Arduino Boards</li> <li>CCStudio for TI Boards</li> <li>Keil Studio is a general IDE which supports many platforms for development</li> </ul> <p>Test out the development board before moving forward to ensure basic peripherals of the MCU are functional using a simple blink sketch.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#makefile-toolchain-based-compilation","title":"Makefile + Toolchain based Compilation","text":"<p>Guide: - Microcontroller Programming without IDE (Makefile + Toolchain) - Build and Flash your Microcontroller Project from the Command-line with a Makefile </p> <p>Why would you even need a custom toolchain? - Proprietary Toolchain can be expensive. - You cannot automate a lot of processes in propriertary toolchain as they need to be done using mouse input which might be an issue when automated testing needs to be configured on cloud or local desktop. - Support can be limited due to expenses or permission to user to edit it. - Less control over compilation due to Proprietary code.</p> <p>:notebook: For our usage, we are working on MSP430 here. So we will be using the toolchains related to it. The open source alternative that we are using is gcc.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#fetch-appropriate-toolchain","title":"Fetch appropriate toolchain","text":"<ol> <li>Download the gcc toolchain for MSP430 from website here. (I suggest to download the version with support files included. This will avoid the hassel of setting up everything personally)</li> <li> <p>I tend to use multiple microcontroller so we want to seperate toolchains from each other to avoid confusion and have an easy access. So I tend to store my toolchains in <code>~/dev/tools/</code> folder.</p> <p>The zip file is downloaded in <code>~/Downloads/</code>. So:</p> <ol> <li>Unzip the file</li> <li> <p>Create a folder to store the toolchains if non-existent and move this toolchain there.</p> <pre><code>    mkdir -p ~/dev/tools\n</code></pre> </li> <li> <p>Open the folder and run the file using</p> <pre><code>sudo ./*.run\n</code></pre> <p>Use the <code>/dev/tools</code> as the install directory for easy managing.</p> </li> <li> <p>Add the toolchain to path. <code>bash cd ~/dev/tools/msp430-gcc/bin/ export PATH=\"$PATH:$(pwd)\"</code> Doing this will add the MSP430 GCC Compiler to your path which can be called easily using <code>msp430-elf-gcc</code> command from anywhere in the system so you don\u2019t need to call the file from the actual path everytime.</p> </li> </ol> </li> </ol>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#configure-the-toolchain","title":"Configure the toolchain","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#basic-compilation","title":"Basic Compilation","text":"<p>If you try to run the code:</p> <pre><code>msp430-elf-gcc main.c\n</code></pre> <p>You will recieve the following error:</p> <pre><code>main.c:53:10: fatal error: msp430.h: No such file or directory\n   53 | #include &lt;msp430.h&gt;      |          ^~~~~~~~~~compilation terminated.\n</code></pre> <p>This is due to the fact the compiler does not know currently where the headers for the chip is located. We need to provide the compiler with those details. You can find <code>msp430.h</code> using:</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#finding-the-necessary-header","title":"Finding the Necessary Header","text":"<p>Files</p> <pre><code>cd ~/dev/tools/msp430-gcc\nfind -name \"msp430.h\"\n</code></pre> <p>This will output the relative location of the file which in this case is:</p> <pre><code>./include/msp430.h\n</code></pre> <p>Go to the folder where msp430 lies and get the path of the file using:</p> <pre><code>cd include\npwd\n</code></pre> <p>This will output the absolute path of <code>msp430.h</code>:</p> <pre><code>/home/ws/dev/tools/msp430-gcc/include\n</code></pre> <p>Copy this path and go back to the folder which contained <code>main.c</code> and use the <code>-I</code> include flag to include this folder for compilation:</p> <pre><code>msp430-elf-gcc -I /home/ws/dev/tools/msp430-gcc/include main.c\n</code></pre> <p>This will generate a new set of errors:</p> <pre><code>msp430-elf-gcc -I /home/ws/dev/tools/msp430-gcc/include main.c\nmain.c: In function 'main':\nmain.c:58:5: error: 'WDTCTL' undeclared (first use in this function)   58 |     WDTCTL = WDTPW + WDTHOLD;                 // Stop watchdog timer\n      |     ^~~~~~main.c:58:5: note: each undeclared identifier is reported only once for each function it appears in\nmain.c:58:14: error: 'WDTPW' undeclared (first use in this function)   58 |     WDTCTL = WDTPW + WDTHOLD;                 // Stop watchdog timer\n      |              ^~~~~main.c:58:22: error: 'WDTHOLD' undeclared (first use in this function)   58 |     WDTCTL = WDTPW + WDTHOLD;                 // Stop watchdog timer\n      |                      ^~~~~~~main.c:59:5: error: 'P1DIR' undeclared (first use in this function)   59 |     P1DIR |= 0x01;                            // Set P1.0 to output direction\n      |     ^~~~~main.c:63:9: error: 'P1OUT' undeclared (first use in this function)   63 |         P1OUT ^= 0x01;                        // Toggle P1.0 using exclusive-OR\n      |         ^~~~~\n</code></pre> <p>This are the set of declaration which are missing. This issue occurs because when manufacturer creates a header file, they create it for a large number of variant. MSP430 has more than 1 variant with different internal structure. Creating seperate headers for each would be a nightmare to manage. So, the developers used macros to segregate specific versions of mcu from a single header file.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#specify-the-mcu-version","title":"Specify the MCU Version","text":"<p>Solution: - The version of mcu can be specified either by adding a <code>#define &lt;mcu-version&gt;</code> in the msp430.h header file which might create an issue of altering this header for all the other firmwares using this header. - Include the mcu version flag <code>-mmcu</code> in the compilation command using <code>bash     msp430-elf-gcc -mmcu=\"msp430g2553\" -I /home/ws/dev/tools/msp430-gcc/include main.c</code></p> <p>This will solve the missing header issue but will present you with another error similar to this:</p> <pre><code>msp430-elf-gcc -mmcu=\"msp430g2553\" -I /home/ws/dev/tools/msp430-gcc/include main.c\n/home/ws/dev/tools/msp430-gcc/bin/../lib/gcc/msp430-elf/9.3.1/../../../../msp430-elf/bin/ld: cannot open linker script file msp430g2553.ld: No such file or directory\ncollect2: error: ld returned 1 exit status\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#finding-the-linker-script","title":"Finding the Linker Script","text":"<p>This issue occurs because the compiler though the command says which linker script to use, it does not tell it where the linker script is located. The linker script can be found in the same directory as <code>msp430.h</code> and will be named specific to the mcu version. For us, it is named: <code>msp430g2553.ld</code></p> <p>Specify the location of linker using <code>-L</code> flag:</p> <pre><code>msp430-elf-gcc -mmcu=\"msp430g2553\" -I /home/ws/dev/tools/msp430-gcc/include -L /home/ws/dev/tools/msp430-gcc/include main.c\n</code></pre> <p>All the work done till now is done manually. Which means you need to perform this process everytime you need to compile the file which can be tiresome. We can automate this using Makefile.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#makefile","title":"Makefile","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#creating-a-basic-makefile","title":"Creating a Basic Makefile","text":"<p>Makefile is a file which contains instructions on how to compile a file. It is useful for following reasons: - Avoids the hassle to manually type the command for compilation everytime. - Complex commands can be seperated into individual smaller commands which can help you to keep track of the process. - Avoid the hassle to compile each file everytime by keeping track of files that are not changed which results to quicker compilation.</p> <p>A format of Makefile looks somewhat like this shown below: - Target: It is the name of the process you want to execute. Can be <code>clean</code> if you want to remove all compiled files or <code>debug</code> if you want to compile for debugging. - Prerequisite: This are the basic requirements that need to meet before executing the command. This can either be any other process that needs to be completed within the makefile or any other file that needs to exist for the process to complete. - Recipe: The set of command that will be passed into the actual command line when you call a target. - Rule: It is a complete set of Target, Prerequisite and Recipe for a command to execute.</p> <p></p> <p>Makefile Format</p> <p>A sample Makefile can look like this:</p> <pre><code># Directories\nMSP430_ROOT_DIR = ~/dev/tools/msp430-gcc\nMSP430_HEADER_DIR = $(MSP430_ROOT_DIR)/include/\nMSP430_LINKER_DIR = $(MSP430_ROOT_DIR)/include/\n\n# Compiler\nCC = $(MSP430_ROOT_DIR)/bin/msp430-elf-gcc\n\n# Base Flags\nMCU_FLAG = -mmcu=msp430g2553\nWARNING_FLAGS = -Wall -Wshadow -Werror -Wextra\nCOMPILATION_FLAGS = $(WARNING_FLAGS) -Og -g\nDEBUG_FLAGS =\nRELEASE_FLAGS =\n\n# Target\nTARGET = blink.out\n\nblink: main.c led.c\n        $(CC) $(MCU_FLAG) -I $(MSP430_HEADER_DIR) -L $(MSP430_LINKER_DIR) $(COMPILATION_FLAGS) main.c led.c -o $(TARGET)\n\nclean:\n        rm -rf *.out\n</code></pre> <p>The variables in the start make it easier to manage paths and directories to be reused. This helps making recipes easier to write and handle by reducing the chance of typing error.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement-by","title":"Improvement by","text":"<p>seperating tags and Flags</p> <p>Makefile can be improved in the following way by breaking down variables into smaller parts. This can help you to make variables a bit more specific which can help you to expand the functionality of Makefile.</p> <pre><code># Directories\nMSP430_ROOT_DIR = /home/ws/dev/tools/msp430-gcc\nMSP430_INCLUDE_DIR = $(MSP430_ROOT_DIR)/include/\nMSP430_LINKER_DIR = $(MSP430_ROOT_DIR)/include/\nINCLUDE_DIR = $(MSP430_INCLUDE_DIR)\nLIB_DIR = $(MSP430_LINKER_DIR)\n\n# Compiler\nCC = $(MSP430_ROOT_DIR)/bin/msp430-elf-gcc\n\n# Base Flags\nMCU_FLAG = msp430g2553\nWARNING_FLAGS = -Wall -Wshadow -Werror -Wextra\nCOMPILER_FLAGS = $(WARNING_FLAGS) $(addprefix -I, $(INCLUDE_DIR))\nLINKER_FLAGS = -mmcu=$(MCU_FLAG) $(addprefix -L, $(LIB_DIR))\nDEBUG_FLAGS = -Og -g\nRELEASE_FLAGS = -O3\n\n# Target File\nTARGET = blink\n\n$(TARGET): main.c led.c\n        $(CC) $(COMPILER_FLAGS) $(LINKER_FLAGS) main.c led.c -o $(TARGET)\n\nclean:\n        rm -rf *.out $(TARGET)\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement","title":"Improvement","text":"<p>by seperating Compilation and Linking Stage</p> <p>If you run the Makefile above, it will compile all .c files everytime the code is being build. Though it may not be an issue with small projects, as the project grows with multiple files, the compilation time will increase. If you are building modular code, then you don\u2019t need to compile every file everytime since most of them will remain unchanged. You can do this but modifying the Makefile like this:</p> <pre><code># Directories\nMSP430_ROOT_DIR = /home/ws/dev/tools/msp430-gcc\nMSP430_INCLUDE_DIR = $(MSP430_ROOT_DIR)/include/\nMSP430_LINKER_DIR = $(MSP430_ROOT_DIR)/include/\nINCLUDE_DIR = $(MSP430_INCLUDE_DIR)\nLIB_DIR = $(MSP430_LINKER_DIR)\n\n# Compiler\nCC = $(MSP430_ROOT_DIR)/bin/msp430-elf-gcc\n\n# Base Flags\nMCU_FLAG = msp430g2553\nWARNING_FLAGS = -Wall -Wshadow -Werror -Wextra\nCOMPILER_FLAGS = -mmcu=$(MCU_FLAG) $(WARNING_FLAGS) $(addprefix -I, $(INCLUDE_DIR))\nLINKER_FLAGS = -mmcu=$(MCU_FLAG) $(addprefix -L, $(LIB_DIR))\nDEBUG_FLAGS = -Og -g\nRELEASE_FLAGS = -O3\n\n# Target File\nTARGET = blink\n\n# Build\n$(TARGET): main.o led.o\n        $(CC) $(LINKER_FLAGS) main.o led.o -o $(TARGET)\n\n# Compiling\nmain.o: main.c\n        $(CC) $(COMPILER_FLAGS) -c main.c -o main.o\n\nled.o: led.c\n        $(CC) $(COMPILER_FLAGS) -c led.c -o led.o\n\nclean:\n        rm -rf *.out $(TARGET)\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement-by-reducing","title":"Improvement by reducing","text":"<p>Repetition</p> <p>You might have noticed that we need to rewrite identical code to compile <code>main.c</code> and <code>led.c</code>. This is cumbersome when there are multiple files. To automate this process, we use <code>Automatic variables</code> available for makefile which can do this repetitive task for us.</p> <ul> <li><code>$^</code> indicates the input file. The file that is needed to be processed with the name provided in <code>%.c</code>.</li> <li><code>$@</code> indicates the output file. The file will be generated with the name provided in <code>%.o</code>.</li> </ul> <pre><code># Build\n$(TARGET): main.o led.o\n        $(CC) $(LINKER_FLAGS) $^ -o $@\n\n# Compiling\n%.o: %.c\n        $(CC) $(COMPILER_FLAGS) -c $^ -o $@\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement-by_1","title":"Improvement by","text":"<p>Improving File Organization</p> <p>If you take a look in the project directory, you will notice that the <code>.o</code> files are mixed with the project files. This makes file navigation and management difficult. This can be improved by moving the build files into its own folder:</p> <ul> <li><code>mkdir</code> creates a new directory. <code>@</code> in front of it supresses the output in terminal and <code>p</code> allows for making a multi-depth folder.</li> </ul> <pre><code># Directories\nMSP430_ROOT_DIR = /home/ws/dev/tools/msp430-gcc\nMSP430_INCLUDE_DIR = $(MSP430_ROOT_DIR)/include/\nMSP430_LINKER_DIR = $(MSP430_ROOT_DIR)/include/\nINCLUDE_DIR = $(MSP430_INCLUDE_DIR)\nLIB_DIR = $(MSP430_LINKER_DIR)\nBUILD_DIR = build\nOBJ_DIR = $(BUILD_DIR)/obj\nBIN_DIR = $(BUILD_DIR)/bin\n\n# Compiler\nCC = $(MSP430_ROOT_DIR)/bin/msp430-elf-gcc\n\n# Base Flags\nMCU_FLAG = msp430g2553\nWARNING_FLAGS = -Wall -Wshadow -Werror -Wextra\nCOMPILER_FLAGS = -mmcu=$(MCU_FLAG) $(WARNING_FLAGS) $(addprefix -I, $(INCLUDE_DIR))\nLINKER_FLAGS = -mmcu=$(MCU_FLAG) $(addprefix -L, $(LIB_DIR))\nDEBUG_FLAGS = -Og -g\nRELEASE_FLAGS = -O3\n\n# Target File\nTARGET = $(BIN_DIR)/blink\n\nSOURCES = main.c\\\n            led.c\nOBJECTS = $(OBJ_DIR)/main.o\\\n                  $(OBJ_DIR)/led.o\n\n# Build\n$(TARGET): $(OBJECTS)\n        @mkdir -p $(dir $@)\n        $(CC) $(LINKER_FLAGS) $^ -o $@\n\n# Compiling\n$(OBJ_DIR)/%.o: %.c\n        @mkdir -p $(dir $@)\n        $(CC) $(COMPILER_FLAGS) -c $^ -o $@\n\nclean:\n        rm -rf $(BUILD_DIR) $(TARGET)\n</code></pre> <p>This would improve the hierarchy and make the files in following order:</p> <pre><code>.\n\u251c\u2500\u2500 blink\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 blink\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 obj\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 led.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.o\n\u251c\u2500\u2500 Debug\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BlinkLED_MSP-EXP430G2ET_linkInfo.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BlinkLED_MSP-EXP430G2ET.map\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BlinkLED_MSP-EXP430G2ET.out\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BlinkLED_MSP-EXP430G2ET.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ccsObjs.opt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.d\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.obj\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 makefile\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 objects.mk\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sources.mk\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 subdir_rules.mk\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 subdir_vars.mk\n\u251c\u2500\u2500 led.c\n\u251c\u2500\u2500 led.h\n\u251c\u2500\u2500 lnk_msp430g2553.cmd\n\u251c\u2500\u2500 main.c\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 targetConfigs\n    \u251c\u2500\u2500 MSP430G2553.ccxml\n    \u2514\u2500\u2500 readme.txt\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement-by-reducing_1","title":"Improvement by Reducing","text":"<p>File Repitition</p> <p>You might have noticed that everytime we need to add a new .c file, we need to make sure that we add it in both <code>SOURCES</code> and <code>OBJECTS</code> variable. To avoid repetition, we can add a substitution function there which can automatically make new <code>OBJECTS</code> variables when new <code>SOURCES</code> are added. This can be done by</p> <pre><code>SOURCES = main.c\\\n                  led.c\nOBJECT_NAMES = $(SOURCES:.c=.o)\n\nOBJECTS = $(patsubst %,$(OBJ_DIR)/%,$(OBJECT_NAMES))\n</code></pre> <ul> <li><code>OBJECT_NAMES = $(SOURCES:.c=.o)</code> stores the names for the .o files by looking at the list of files available in the <code>SOURCES</code> variable with .c extension.</li> <li><code>OBJECTS = $(patsubst %,$(OBJ_DIR)/%,$(OBJECT_NAMES))</code> creates a path substitution where it looks for files in <code>OBJECT_NAMES</code> variables and places them in <code>OBJ_DIR</code> folder.</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement-by-improving","title":"Improvement by improving","text":"<p>safety</p> <p>While writing code, you might come across a situation where you might try to create a file by name maybe <code>clean.c</code>, if you run <code>make clean</code>, it will throw an error as the Makefile will assume you are trying to compile the <code>clean.c</code> file rather than clearing the compilation files. This can be avoided by adding <code>Phonies</code>. They are name to recipe that can be executed when made a request. They can be specified as follows:</p> <pre><code># Phonies\n.PHONY: all clean\n\nall: $(TARGET)\n\nclean:\n        rm -rf $(BUILD_DIR) $(TARGET)\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#improvement-on-flashing-mcu","title":"Improvement on Flashing MCU","text":"<p>You can create a Makefile recipe to flash the MCU as follows:</p> <pre><code># Directories\n\n## Build Directories\nMSP430_ROOT_DIR = /home/ws/dev/tools/msp430-gcc\nMSP430_INCLUDE_DIR = $(MSP430_ROOT_DIR)/include/\nMSP430_LINKER_DIR = $(MSP430_ROOT_DIR)/include/\nINCLUDE_DIR = $(MSP430_INCLUDE_DIR)\nLIB_DIR = $(MSP430_LINKER_DIR)\nBUILD_DIR = build\nOBJ_DIR = $(BUILD_DIR)/obj\nBIN_DIR = $(BUILD_DIR)/bin\n\n## Debug and Flashing Directories\nTI_CCS_DIR = /home/ws/dev/ide/CCStudio/ccs1230/ccs\nDEBUG_BIN_DIR = $(TI_CCS_DIR)/ccs_base/DebugServer/bin\nDEBUG_DRIVER_DIR = $(TI_CCS_DIR)/ccs_base/DebugServer/drivers\n\n# Toolchain\nCC = $(MSP430_ROOT_DIR)/bin/msp430-elf-gcc\nDEBUG = LD_LIBRARY_PATH=$(DEBUG_DRIVER_DIR) $(DEBUG_BIN_DIR)/mspdebug\n\n# Base Flags\nMCU_FLAG = msp430g2553\nWARNING_FLAGS = -Wall -Wshadow -Werror -Wextra\nCOMPILER_FLAGS = -mmcu=$(MCU_FLAG) $(WARNING_FLAGS) $(addprefix -I, $(INCLUDE_DIR))\nLINKER_FLAGS = -mmcu=$(MCU_FLAG) $(addprefix -L, $(LIB_DIR))\nDEBUG_FLAGS = -Og -g\nRELEASE_FLAGS = -O3\n\n# Target File\nTARGET = $(BIN_DIR)/blink\n\nSOURCES = main.c\\\n          led.c\nOBJECT_NAMES = $(SOURCES:.c=.o)\n\nOBJECTS = $(patsubst %,$(OBJ_DIR)/%,$(OBJECT_NAMES))\n\n# Build\n$(TARGET): $(OBJECTS)\n    @mkdir -p $(dir $@)\n    $(CC) $(LINKER_FLAGS) $^ -o $@\n\n# Compiling\n$(OBJ_DIR)/%.o: %.c\n    @mkdir -p $(dir $@)\n    $(CC) $(COMPILER_FLAGS) -c $^ -o $@\n\n# Phonies\n.PHONY: all clean flash\n\nall: $(TARGET)\n\nclean:\n    rm -rf $(BUILD_DIR) $(TARGET)\n\nflash: $(TARGET)\n    $(DEBUG) tilib \"prog $(TARGET)\"\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#tips","title":"Tips","text":"<ul> <li>Essential Compilation Flags: The Best and Worst GCC Compiler Flags for Embedded</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#software-architecture-for","title":"Software Architecture for","text":"<p>Projects</p> <p>Guide: How to Create a Software Architecture </p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#base-structure","title":"Base Structure","text":"<p>A standard and modular software Architecture would look as presented below:</p> <pre><code>flowchart LR\n\nA[Statement] --&gt; B[Function]\nB --&gt; C[Module]\nC --&gt; D[Architecture]</code></pre> <p>We need a proper architecture in our code as our development should not focus on one time run. We create things that need to be checked, edited and reformed. If we create a single use code, we will run into the issue of needing to remake the complete code everytime the change needs to be done because our earlier approach resulted in a clunky and jumbled piece of code.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#why-a-reliable","title":"Why a reliable","text":"<p>architecture required</p> <p>A good architecture can have with: - Reasonability: With limited brain power that we have, we want the code flow to be simpler to understand. This can be done by combining similar code together into a single file or module and making processes as human readable as possible by converting a group of statements into smaller functions. - Maintainability: Since the code is divided into human readable format, if we need to make certain changes, moving around and making changes becomes easier. - Collaboration: Easy to read code makes it easier for people to pitch in and work with it. - Reusability - Portability: Modular code makes it easier to transfer code between different projects easily. If you seperate platform dependent and platform independent code, the only task left is to change the platform dependent code when you switch platform. - Testability: Testing individual process clubbed as function make it easier to test rather than testing the complete software at a single stretch where you might be not able to catch edge cases or find exact location of fault in code.</p> <p>A well developed software architecture might look somewhat as shown below:</p> <p></p> <p>Sumobot Architecture</p> <ul> <li>Driver are hardware dependent code where changes will be needed to be made in order to change platforms</li> <li>Application are hardware independent code which can be ported without significant changes.</li> </ul> <p>This architecture can be made once you have an idea of the requirements you have based on the sensor/actuator requirements along with their communication/interface protocols required for the product to work.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#what-to","title":"What to","text":"<p>keep in mind while making a good architecture</p> <p>A good architecture will have following things in practise: - Decoupling: Decouple code as much as possible to seperate hardware-dependent code from application layer code. - Modularity - Seperation of Concerns - Single Responsibility - Cohersion - Encapsulation - Don\u2019t repeat yourself (DRY): Make sure that the code you make is not duplicate. A single change at a location of code should be sufficient to implement those changes across the project rather than making change in multiple files.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#tips_1","title":"Tips","text":"<ul> <li>Embedded Systems Architecture Resources</li> <li>Efficient Implementation of printf/sprintf for Embedded Systems: mpaland/printf</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#project-structure","title":"Project Structure","text":"<p>Guide: The Best Project Structure for C/C++/MCU </p> <p>A good project structure makes it easier to manage files, perform automations and prepare documentation. The structure suggested here is Pitchform Layout.</p> <p>The project structure is of form:</p> <pre><code>.\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 a.out\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 obj\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 main.o\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 module1.o\n\u251c\u2500\u2500 data\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Applications\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Images\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 image1.png\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 external\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 printf\n\u251c\u2500\u2500 extras\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 defines.cpp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 drivers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 module1.cpp\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n\u251c\u2500\u2500 libs\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 defines.h\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 drivers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.cpp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 module1.cpp\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n\u251c\u2500\u2500 tests\n\u2514\u2500\u2500 tools\n    \u2514\u2500\u2500 PLACEHOLDER\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Some of the popular available Project Structure:<ul> <li>Pitchfork Layout</li> <li>Canonical Project Structure</li> <li>How to structure your project</li> </ul> </li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#version-control-on-projects","title":"Version Control on Projects","text":"<p>Guide: How I version control with git (Best Practices) </p> <p>Version control helps you keep track of changes that you make to the project. It helps you a restore point in case you mess-up some change (Believe me that it will happen in almost every project!!) while keeping track of all the progress you make.</p> <p>There are many version control options: - Manual Versioning (You make copies of files with V.. next to the folder name. Kill me but don\u2019t do this.) - Git - Plastic SCM - Many more..</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#base-rules","title":"Base Rules","text":"<p>There are some rules you should follow for a better version control over your project: - One Change per commit: Do not overcrowd too much changes in a single commit. Single change per commit ensures that each change is seperated and can be individually visited and modified rather than drastic changes. - Test and build commits: Make sure to automate tests for each commits or push to github so that the commits can verify the production. This ensures that wrong changes are not commited. - Good Commit Messages: Good Commit messages help others (and future you) to understand what exactly did a change do and how it will affect the code.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#tips_2","title":"Tips","text":"<ul> <li>Guide to Commit Messages Properly</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#static-analysis-for-cc","title":"Static Analysis for C/C++","text":"<p>Guide: Static Analysis for C/C++ with cppcheck (+Makefile) </p> <p>A static analysis acts like a proof-reader for your project. It performs various checks like grammer check in MS Word. It suggest ways to improve code flow, correct logical errors or reduce non-reachable parts of code. There are many options to integrate Static Analysis to your project. One of the opensource available option is <code>cppcheck</code>.</p> <p>You can integrate <code>cppcheck</code> in your Makefile to automate the checking.</p> <p>Install <code>cppcheck</code> on your system from a new terminal:</p> <pre><code>sudo apt-get install cppcheck\n</code></pre> <p>Amend the Makefile to integrate <code>cppcheck</code> as follows:</p> <pre><code># CPPCHECK\nCPPCHECK = cppcheck\nCPPCHECK_FLAGS = --quiet --enable=all --error-exitcode=1 --inline-suppr\n\ncppcheck:\n    $(CPPCHECK) $(CPPCHECK_FLAGS)\\\n        -I $(INCLUDE_DIR)\\\n        $(SOURCES)\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#simple-cicd-with-github","title":"Simple CI/CD with GitHub","text":"<p>Guide: Simple CI/CD with GitHub Actions and Docker (Compile+Analysis) </p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#basics","title":"Basics","text":"<p>CI stands for Continuous Integration</p> <p>CD stands for Continuous Delivery/Continuous Deployment.</p> <p>CI/CD helps you to automate various processing and set rules to your git project. You can integrate docker with git to automatically host changes and build files on GitHub.</p> <p>Truly, you can define work of CI/CD as a system that stops you from merging code that does not work. Correct code will the analysed and deployed whereas incorrect code will fail to merge.</p> <p>Workflow can be as follows:</p> <pre><code>stateDiagram-v2\n[*] --&gt; Branch\nBranch --&gt; cc\ncc --&gt; bcpp\nbcpp --&gt; Commit\nCommit --&gt; Push\nPush --&gt; pr\npr --&gt; ga\nstate ga {\n  [*] --&gt; Make\n  Make --&gt; Analyse\n  Analyse --&gt; [*]\n  }\nga --&gt; Merge : Success\nga --&gt; Rework : Failure\n\nRework --&gt; cc\nMerge --&gt; [*]\n\ncc : Code Change\nbcpp : Build + CppCheck\npr : Pull Request\nga : GitHub Actions</code></pre> <p>GitHub Actions runs the Job inside a Linux Virtual Machine. You can setup a docker container if you want to setup custom commands and develop cross-platform tools.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#setup-essentials","title":"Setup Essentials","text":"<p>You firstly need docker in your system to make a docker image that can be hosted somewhere for GitHub to fetch during GiHub Actions(GA).</p> <p>Install Docker:</p> <pre><code>sudo apt-get install docker.io\n</code></pre> <p>Since we are going to work with this often and this requires admin access, to avoid <code>sudo</code> often, we will create a docker group and add user to it.</p> <p>Create Group by name <code>docker</code></p> <pre><code>sudo groupadd docker\n</code></pre> <p>Add User to this group</p> <pre><code>sudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#dockerfile","title":"dockerfile","text":"<p>Dockerfile is used to set the base os for the action. It can be used to install essential dependencies and needed tools.</p> <p>Now move to the project directory, and create a new folder <code>tools</code> if it does not exist. <code>cd</code> into <code>tools</code>.</p> <p>Create a new file to write the docker commands</p> <pre><code>touch dockerfile\n</code></pre> <p>Make the dockerfile with the following code:</p> <pre><code>FROM ubuntu:23.04\n# Install necessary packagesRUN DEBIAN_FRONTEND=noninteractive \\    apt-get update \\    &amp;&amp; apt-get install -y wget bzip2 make unzip cppcheck\n# Create a non-root user named \"ubuntu\"# But put it in root group since GitHub actions need permissions to create temp filesRUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo \\    -u 1001 msp\n# Set correct ownership and permissionRUN chown -R msp:root /home/ubuntu\nRUN chmod -R 755 /home/ubuntu\nUSER msp\nWORKDIR /home/ubuntu\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#code-explaination","title":"Code Explaination","text":"<p>Set the base OS Image for docker.</p> <pre><code>FROM ubuntu:23.04\n</code></pre> <p>This sets the DEBIAN_FRONTEND environment variable to noninteractive, as explained in the previous responses. It ensures that package installations will not prompt for user input and will use default options instead.</p> <pre><code>RUN DEBIAN_FRONTEND=noninteractive\n</code></pre> <p>This command updates the package lists from the repositories to ensure you are installing the latest versions of packages.</p> <pre><code>apt-get update\n</code></pre> <p>Install the essential packages needed for actions. <code>-y</code> flag allows to automatically answer <code>yes</code> to any prompts.</p> <pre><code>apt-get install -y wget bzip2 make unzip cppcheck\n</code></pre> <p>Create a new user named \u201cubuntu\u201d with the following options: - <code>rm</code>: Remove the user\u2019s home directory if it already exists (prevents conflicts). - <code>d /home/ubuntu</code>: Set the home directory for the user to /home/ubuntu. - <code>s /bin/bash</code>: Set the default shell for the user to /bin/bash. - <code>g root</code>: Add the user to the \u201croot\u201d primary group. - <code>G sudo</code>: Add the user to the \u201csudo\u201d supplementary group, which allows the user to execute commands with elevated privileges when using the sudo command. - <code>u 1001</code>: Set the user ID to 1001 (it\u2019s not recommended to use the default user ID 1000 because it might conflict with a host user with the same ID). - <code>USER msp</code>: This sets the default user to \u201cmsp\u201d meaning any subsequent commands in the Dockerfile and when the container runs will execute under this non-root user\u2019s context. This enhances security by avoiding running processes with root privileges.</p> <pre><code>RUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1001 msp\n</code></pre> <p>Set the working directory to /home/ubuntu, meaning any commands that follow will be executed relative to this directory.</p> <pre><code>WORKDIR /home/ubuntu\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#build-the-basic-docker-image","title":"Build the basic docker image","text":"<ul> <li><code>msp430gcc</code> is the docker container name. You can name it anything you want.</li> <li><code>.</code> is the location of the directory. Since we are running it from the <code>tools</code> directory, we use <code>.</code></li> </ul> <pre><code>docker build -t msp430gcc .\n</code></pre> <p>After the install is complete, look for all available docker images using:</p> <pre><code>docker images\n</code></pre> <p>The output will be as follows:</p> <pre><code>msp430gcc                       latest    5ea5cd5de2fe   5 minutes ago   174MB\nubuntu                          23.04     1ed313b0551f   6 weeks ago     70.3MB\n</code></pre> <p><code>msp430gcc</code> is our base docker that we will use moving forward to integrate our toolchains with it.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#adding-msp430","title":"Adding MSP430","text":"<p>Toolchain to base docker image</p> <p>We can choose to fetch the toolchain directly from the TI website during the CI process but we choose to create a docker image with a fixed version of MSP430 GCC Toolchain instead because as changes are made to the toolchain by msp430, the url might change. This might break the process of fetching. To avoid this issue, we will modify the docker image of ubuntu to have msp430 toolchain inside to avoid the fetching issue.</p> <p>Login into the docker container using:</p> <pre><code>docker run --interactive msp430gcc --tty /bin/bash\n</code></pre> <p>This will load the bash terminal of the docker image just created.</p> <p>Open the TI\u2019s website to download the latest version of ToolChain and Support Files available. At current time, it is: - Mitto Systems GCC 64-bit Linux - toolchain only(V9.3.1.11) - Header and Support Files</p> <p>Download them into the launch docker container using wget:</p> <pre><code>wget https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-LlCjWuAbzH/9.3.1.2/msp430-gcc-support-files-1.212.zip\nwget https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-LlCjWuAbzH/9.3.1.2/msp430-gcc-9.3.1.11_linux64.tar.bz2\n</code></pre> <p>Unzip the files:</p> <pre><code>tar xvjf msp430-gcc-9.3*unzip msp430-gcc-support*\n</code></pre> <p>Move the <code>include</code> directory from MSP430 Support files to <code>include</code> directory of MSP430 toolchain.</p> <pre><code>mv msp430-gcc-support-files/include/* msp430-gcc-9.3.1.11_linux64/include/\n</code></pre> <p>Create the <code>dev/tools/</code> directory like we have in our computer for toolchain to be placed:</p> <pre><code>mkdir -p dev/tools\nmv msp430-gcc-9.3.1.11_linux64 dev/tools/msp430-gcc\n</code></pre> <p>Clear all extra files and exit container:</p> <pre><code>rm -rf msp*exit\n</code></pre> <p>Find the container ID of this docker session and commit it into a new image:</p> <pre><code>docker ps -a\n</code></pre> <p>The output of all sessions will be as follows:</p> <pre><code>CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS                         PORTS     NAMES\n090b39853eec   msp430gcc      \"/bin/bash\"              4 minutes ago       Exited (0) 2 seconds ago                 sleepy_vaughan\nec716a782125   msp430gcc      \"/bin/bash\"              43 minutes ago      Exited (0) 40 minutes ago                funny_tu\nd31d9b3d22fe   87ada84a26e8   \"/bin/bash\"              About an hour ago   Exited (0) About an hour ago             laughing_jackson\n71e460a0c533   72c77c8a3a9e   \"/bin/bash\"              About an hour ago   Exited (2) About an hour ago             upbeat_kare\n99c1ee5b66eb   89d2dbc25de6   \"/bin/sh -c 'useradd\u2026\"   About an hour ago   Exited (9) About an hour ago             pedantic_shannon\nb0827366987b   6fee5ce39d5d   \"/bin/sh -c 'useradd\u2026\"   2 hours ago         Exited (9) 2 hours ago                   exciting_keller\n</code></pre> <p>Save the topmost session as new docker image. Write the name of new docker image in following format: <code>&lt;docker-hub-username&gt;/&lt;toolchain-version&gt;</code>. This will allow for a simple push to the docker hub ahead.</p> <pre><code>docker commit 090b39853eec parth2007/msp430-gcc-9.3.1.11\n</code></pre> <p>Check for the new docker image by using:</p> <pre><code>docker images\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#pushing-to-docker-hub","title":"Pushing to Docker Hub","text":"<p>For Github to fetch this image, we need to make sure that this is available somewhere to access it. We will be placing this docker image at dockerhub.</p> <ol> <li>Create Account/Login into docker hub.</li> <li>Configure connection to docker hub on your terminal using:</li> </ol> <pre><code>docker login\n</code></pre> <p>Enter the <code>USER ID</code> and <code>PASSWORD</code> from docker hub to login into docker hub from terminal. 3. After successful login, push the image to docker hub by: <code>bash   docker push parth2007/msp430-gcc-9.3.1.11:latest</code></p> <p>This will take some time but you will be able to push the image to the docker hub to access it from anywhere you want.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#creating-ci-system","title":"Creating CI System","text":"<p>GitHub requires the CI File to be stored at a specific location <code>&lt;root&gt;/.github/workflows</code>.</p> <p>Make the <code>ci.yml</code> from project root as follows:</p> <pre><code>mkdir -p .github/workflows -ptouch .github/workflows/ci.yml\n</code></pre> <p>Open the ci file and create the ci process as follows:</p> <pre><code>on: [push]jobs:  build_and_static_analysis:    runs-on: ubuntu-latest    container:      image: parth2007/msp430-gcc-9.3.1.11    steps:      - name: Checkout the repository        uses: actions/checkout@v3      - run: make      - run: make cppcheck\n</code></pre> <p>This GitHub Actions CI (Continuous Integration) configuration file (ci.yml) automates the build and static analysis process for a repository. Let\u2019s break down the contents of the file:</p> <pre><code>on: [push]\n</code></pre> <p>This line specifies the trigger event that activates the CI workflow. In this case, the workflow will be triggered whenever there is a \u201cpush\u201d event to the repository. This means that the CI process will run whenever code is pushed to the repository.</p> <pre><code>jobs:  build_and_static_analysis:    runs-on: ubuntu-latest    container:      image: parth2007/msp430-gcc-9.3.1.11    steps:      - name: Checkout the repository        uses: actions/checkout@v3      - run: make      - run: make cppcheck\n</code></pre> <p>This section defines the actual CI job named \u201cbuild_and_static_analysis.\u201d It specifies the operating environment for the job, which is \u201cubuntu-latest,\u201d meaning the CI process will run on the latest version of Ubuntu available in the GitHub Actions environment.</p> <p>The <code>container</code> section allows the job to run inside a Docker container with the specified image (<code>parth2007/msp430-gcc-9.3.1.11</code>). This image contains the necessary tools and dependencies required for building and analyzing MSP430 projects using GCC 9.3.1.11.</p> <p>The <code>steps</code> section lists the individual tasks that the CI job will execute:</p> <ol> <li><code>Checkout the repository</code>: This step uses the <code>actions/checkout</code> GitHub Action to fetch the latest code from the repository. It ensures that the CI process has access to the repository\u2019s source code.</li> <li><code>run: make</code>: This step executes the <code>make</code> command. The <code>make</code> command is commonly used to build projects based on Makefiles. It will likely build the MSP430 project.</li> <li><code>run: make cppcheck</code>: This step executes the <code>make cppcheck</code> command. It implies that there is a target in the project\u2019s Makefile called <code>cppcheck</code>, which likely runs the static code analysis tool <code>cppcheck</code>. Static code analysis helps identify potential bugs, coding issues, and other problems in the codebase without actually executing the code.</li> </ol> <p>Overall, this CI workflow automates the process of building the MSP430 project and performing static code analysis on it whenever changes are pushed to the repository. The results of the CI process can be viewed in the GitHub Actions tab of the repository. If there are any build errors or static analysis issues, they will be reported in the CI log, allowing the developers to take corrective actions.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#adding-branch-protection","title":"Adding Branch Protection","text":"<p>Rules</p> <p>Branch Rules allow you to set a particular set of behavior for developers to follow so that you can increase safety of the production or main branch. One of those behaviors is to create branches from the <code>main</code> everytime a change to the design/code needs to be made. This ensures that even if you change breaks the system or introduces a new bug, anyone using or code from the main branch can avoid any issues related to the changes you just made.</p> <p>https://scribehow.com/embed/Step-by-Step_Guide_to_Adding_Branch_Protection_Rules_on_GitHub__jhhd0RRtTxujJiPrOpVHig</p> <p>Your complete ci is going to fail after this because the Makefile still points towards the directory address of the toolchain in your computer rather than docker workchain. We need to ammend that.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#ammend-makefile-for-ci","title":"Ammend Makefile for CI","text":"<p>Modify the Makefile to change the path of toolchain. This can be done by introducing a variable that takes <code>TOOLS_PATH</code> as input.</p> <pre><code>TOOLS_DIR = $(TOOLS_PATH)\n$(info $(TOOLS_DIR))\nMSP430_ROOT_DIR = $(TOOLS_DIR)/msp430-gcc\nMSP430_INCLUDE_DIR = $(MSP430_ROOT_DIR)/include/\nMSP430_LINKER_DIR = $(MSP430_ROOT_DIR)/include/\nINCLUDE_DIR = $(MSP430_INCLUDE_DIR)\nLIB_DIR = $(MSP430_LINKER_DIR)\nBUILD_DIR = build\nOBJ_DIR = $(BUILD_DIR)/obj\nBIN_DIR = $(BUILD_DIR)/bin\n</code></pre> <p>We also need to make changed to the ci.yml so we can pass the TOOLS_PATH as input to it.</p> <pre><code>on: [push]jobs:  build_and_static_analysis:    runs-on: ubuntu-latest    container:      image: parth2007/msp430-gcc-9.3.1.11    steps:      - name: Checkout the repository        uses: actions/checkout@v3      - run: TOOLS_PATH=/home/ubuntu/dev/tools make      - run: TOOLS_PATH=/home/ubuntu/dev/tools make cppcheck\n</code></pre> <p>After making these changes, push your code to GitHub to start the implementation.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#how-to-use-it-moving","title":"How to use it moving","text":"<p>forwards?</p> <p>The process moving forwards is simple: 1. Create a new local branch. 2. Edit the code to make the changes needed. 3. Test the changes at local level using your makefile. 4. Commit and Push the code to github using: <code>bash   git push -u origin &lt;branch-name&gt;</code> 5. Accept the pull request on your mail branch. A CI Action will run before the merge can be accepted. 6. If the CI Action is successful, confirm merging with main branch. 7. Delete the branch both at local and remote level. 8. Perform Git Pull on local branch <code>main</code>.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#resources","title":"Resources","text":"<p>Complete Guide to CI/CD from GitHub can be found at: - CI/CD: The what, why, and how - Learn GitHub Actions</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#documentation-and-clang","title":"Documentation and Clang","text":"<p>Guide: Documentation and Clang format </p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#documentaion","title":"Documentaion","text":"<p>A good documentation README of a project contains following items: - Project Name on Top. - Photos Showing the Project/Functionality. - A Brief Writeup of how the project works. - A Small Write up on what technology and design procedure have been used in project. - Project Directory Structure showing how the files are organized. - Guide on how to build/run the project. - Small explaination on how to the project automation files work. - Write-up on any Tests present. - Commit Guide for a new change - Schematic Diagram of the Hardware if any. - Guide on how to generate/fetch Bill of Materials. - Software Architecture if any</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#clang-formatting","title":"Clang-Formatting","text":"<p>Most IDE that you use can install dependencies that can format code for you. But if you are working with multiple different systems, different IDEs or Formatters can format code in different ways. To create a uniform formatting pattern, external/manual formatting agents can be used.</p> <p>clang-format is one of the commonly used free tool available out there which can be used to set code formatting rules.</p> <p>Install clang-format on your system using:</p> <pre><code>sudo apt install clang-format\n</code></pre> <p>After the install, you need to create a <code>.clang-format</code> file which holds all the rules for Formatting. There are various available formats of formatting availale: - <code>LLVM</code> A style complying with the LLVM coding standards - <code>Google</code> A style complying with Google\u2019s C++ style guide - <code>Chromium</code> A style complying with Chromium\u2019s style guide - <code>Mozilla</code> A style complying with Mozilla\u2019s style guide - <code>WebKit</code> A style complying with WebKit\u2019s style guide - <code>Microsoft</code> A style complying with Microsoft\u2019s style guide - <code>GNU</code> A style complying with the GNU coding standards</p> <p>Create the file in required format as follows:</p> <pre><code>clang-format -style=GNU -dump-config &gt; .clang-format\n</code></pre> <p>This will create a <code>.clang-format</code> as per the coding standard available from these groups.</p> <p>You can format a file using the command:</p> <pre><code>clang-format -i main.c\n</code></pre> <p>As you might have noticed, this is going to be tiring if you do this for every file available, So to automate formatting on all files, you can create a PHONY in Makefile.</p> <pre><code>FORMATTER: clang-format\n\n.PHONY: format\n\nformat:\n  @$(FORMATTER) -i $(SOURCES)\n</code></pre> <p>Now, you can format all files by simply calling:</p> <pre><code>make format\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#integrating-formatting-with","title":"Integrating Formatting with","text":"<p>CI/CD</p> <p>clang-format can be integrated in CI using docker.</p> <p>Update the <code>dockerfile</code> to install clang-format.</p> <pre><code># Install necessary packagesRUN DEBIAN_FRONTEND=noninteractive \\    apt-get update \\    &amp;&amp; apt-get install -y wget bzip2 make unzip cppcheck clang-format git\n</code></pre> <p>Follow the CI/CD Guide to update the image on dockerhub with this clang-format.</p> <p>Update the CI.yml to run a formatting check task:</p> <pre><code>- run: make format &amp;&amp; git diff --quiet- run: TOOLS_PATH=/home/ubuntu/dev/tools make- run: TOOLS_PATH=/home/ubuntu/dev/tools make cppcheck\n</code></pre>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Design%20from%20Scratch%20using%20Custom%20Makefiles%20and%20Reg%206f43a806ee5b46ef9cac332e5f0fc132/#resources_1","title":"Resources","text":"<ul> <li>Clang Official Documentation</li> <li>Lei Mao\u2019s Log Book: Format C/C++ Using Clang-format</li> <li>Clang Official Documentation: Configurable Format Style Options</li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/EtherCAT%20Protocol%200571ae01760843789d1c31a5d548d9c9/","title":"EtherCAT Protocol","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/EtherCAT%20Protocol%200571ae01760843789d1c31a5d548d9c9/#concept","title":"Concept","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Software/EtherCAT%20Protocol%200571ae01760843789d1c31a5d548d9c9/#resources","title":"Resources","text":"<p>What Is EtherCAT Protocol and How Does It Work?</p> <p>EtherCAT in 20 minutes</p> <p>EtherCAT in 2 Minutes (English)</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Programming%20Embedded%20Systems%20In%20C%20and%20C%2B%2B%208684f707af334cfb89afa2bdcb745ce2/","title":"Programming Embedded Systems In C and C++","text":""},{"location":"Study%20Notes/Embedded%20Systems%20Software/Programming%20Embedded%20Systems%20In%20C%20and%20C%2B%2B%208684f707af334cfb89afa2bdcb745ce2/#chapter-3-compiling","title":"Chapter 3: Compiling,","text":"<p>Linking and Locating</p> <ul> <li>The complete process of compilation of code from source to binary image is done in 3 distinct steps:<ul> <li>Compilation: Converting each code file into independent object files.<ul> <li>Input: Code files</li> <li>Output: Multiple .o files (object files)</li> </ul> </li> <li>Linker: Merge all the object files generated in last step into a single object file with relocatable program. i.e.\u00a0Memory positions of the code is relative at this point in the object file.<ul> <li>Input: Multiple .o files</li> <li>Ouput: Single Merged .o file with the memory location relative to each other</li> </ul> </li> <li>Locator1: The relocatable object file is assigned exact location based on the starting address and size of different types of memory for the system<ul> <li>Input: Relocatable Object File</li> <li>Output: Mapped Binary File ready to be uploaded to the embedded device</li> </ul> </li> </ul> </li> </ul>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Programming%20Embedded%20Systems%20In%20C%20and%20C%2B%2B%208684f707af334cfb89afa2bdcb745ce2/#compiling","title":"Compiling","text":"<p>The job of a compiler is mainly to translate the programs written in human readable language into an equivalent set of opcodes for a particular processor.</p> <p>Difference between Compiler and Assembler: - Compiler: A bit complex set of conversion which convert human readable code into opcodes in binary. - Assembler: A simpler form of conversion which converts the assembly format of code into opcode in binary. (Much simpler to convert that a compiler).</p> <p>Cross Compiler: A compiler that runs of one platform and compiles code for another platform. This is often used in Embedded Systems because the processing power on Embedded Systems in too small to have space for both a compiler and the program that it needs to run.</p> <p>The GNU C/C++ Compiler (gcc) and assembler (as) can be configured as either native compiler or cross-compiler.</p> <p>Object File (.o file) - The object file can be thought of as a very large, flexible data structure. The structure of the file is usually defined by a standard format like the Common Object File Format (COFF) or Extended Linker Format (ELF). - Most Unix-based platform support standards like .coff or .elf which is supported by gcc. But there are some platforms which have their own proprietary formats. - The object file generated from the compiler is incomplete. Which means that if you have some definitions of variables or function that don\u2019t exist in current file, a relative term is placed on its place. This makes the object file incomplete at this moment.</p> <p>How the object file is formatted - .text: Contains the basic code block. Instructions for code flow. - .data: Contains all the initialized global variables with their values. - .bss: Contains all the uninitialized global variables.</p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Programming%20Embedded%20Systems%20In%20C%20and%20C%2B%2B%208684f707af334cfb89afa2bdcb745ce2/#linking","title":"Linking","text":"<p>The main task of the linker is to merge the individual object files generated from the compiler into a single object file which has all the memory location in relative spaces.</p> <p>The variables of the object file which were not linked are done in this stage. The non-linked variables are replaced with the correct address/references and the final code generated is an object file where all the variables are reference in relative to a memory position that is still not fed in to finalize the code.</p> <p>The GNU Linker (ld) runs of all the same host platform as the GNU Compiler. It is a command line tool that takes the name of all object files to be linked together as arguments. For embedded systems, there is a special file linked along with all called as starter code. This file contains the code which tells the basic steps the microcontroller needs to go through before starting the code inside main function.</p> <p>A company called Cygnus has created a free library version called newlib which is equivalent to Standard C Library for embedded systems. </p>"},{"location":"Study%20Notes/Embedded%20Systems%20Software/Programming%20Embedded%20Systems%20In%20C%20and%20C%2B%2B%208684f707af334cfb89afa2bdcb745ce2/#locating","title":"Locating","text":"<p>The task of a locator is to convert the relative position from the object file of linker into a file with exact specifications of the memory start addresses and size of memory.</p> <p>It looks something like this:</p> <pre><code>MEMORY\n{ram : ORIGIN = 0x00000, LENGTH = 512K        rom : ORIGIN = 0x80000, LENGTH = 512K}SECTIONS\n{  data ram :                /* Initialized data. */  {    _DataStart = . ;    *(.data)      _DataEnd = . ;  } &gt;rom\nbss :               /* Initialized data. */  {    _BssStart = . ;    *(.bss)      _BssEnd = . ;  }  _BottomOfHeap = . ;               /* The heap starts here. */  _TopOfStack = 0x80000 ;           /* The stack ends here. */  text rom :                        /* The actual instructions. */  {    *(.text)  }}\n</code></pre> <ol> <li>For a regular system (i.e.\u00a0Computers), the Locator is used during runtime. i.e.\u00a0Memory allocation happens only when you run the program to save memory. Whereas, in embedded systems, since the task of the system is specific, it is preallocated.\u21a9\ufe0e</li> </ol>"},{"location":"Study%20Notes/Linux/","title":"Linux","text":"<p>Embedded Linux</p> <p>File System</p>"},{"location":"Study%20Notes/Linux/Embedded%20Linux%2016f95dff9be04c84b26d8c979d48a9af/","title":"Embedded Linux","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Linux/Embedded%20Linux%2016f95dff9be04c84b26d8c979d48a9af/#resources","title":"Resources","text":"<p>https://youtu.be/BdKyq56Cijo?si=eocmqj9aHfAxxJM5</p>"},{"location":"Study%20Notes/Linux/File%20System%20266e17d8fff746f0bc28349b6ba64b87/","title":"File System","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Linux/File%20System%20266e17d8fff746f0bc28349b6ba64b87/#basics","title":"Basics","text":""},{"location":"Study%20Notes/Linux/File%20System%20266e17d8fff746f0bc28349b6ba64b87/#fhs","title":"FHS","text":"<p>https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html</p> <p>FHS: Filesystem Hierarchy Standard</p>"},{"location":"Study%20Notes/Linux/File%20System%20266e17d8fff746f0bc28349b6ba64b87/#what-each-file-system-hold","title":"What each file system Hold","text":"<ul> <li>/bin: Essential Command Binaries used across system like bash, cat, etc</li> <li>/sbin: Essential System Binaries useful for mostly system admin accounts</li> <li>/boot: Static Files for boot loader</li> <li>/cdrom: Legacy Mounting Point for older Compact Disc Drives</li> <li>/dev: Device Files where all the virtual and hardware devices are placed/mounted</li> <li>/etc: Host-specific system-wide Configurations like apt, Bluetooth, etc</li> <li>/lib: Essential Shares Libraries and Kernel Modules</li> <li>/lib32, /lib64: Alternate format essential shared libraries</li> <li>/mnt: Mount Point for Mounting a filesystem temporarily</li> <li>/media: Mount Point for Removable Media</li> <li>/opt: Add-on Application Software Packages</li> <li>/proc:</li> <li>/root: Home Directories for the root user</li> <li>/run: Data relevant to running processes</li> <li>/snap: Snapd Packages</li> <li>/srv: Data for services provided by this system</li> <li>/sys:</li> <li>/tmp: Temporary Files</li> <li>/usr: Secondary Hierarchy</li> <li>/var: Variable Data</li> <li>/home: User Home Directories</li> </ul>"},{"location":"Study%20Notes/Linux/File%20System%20266e17d8fff746f0bc28349b6ba64b87/#resources","title":"Resources","text":"<p>https://youtu.be/HbgzrKJvDRw?si=tcjstP0dKomPCBzP</p> <p>https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html</p>"},{"location":"Study%20Notes/Programming%20Essentials/","title":"Programming Essentials","text":"<p>CI/CD Pipelines</p> <p>Data Structures and Algorithms</p>"},{"location":"Study%20Notes/Programming%20Essentials/CI%20CD%20Pipelines%20864c3582a4b245dc915832aa22835988/","title":"CI/CD Pipelines","text":"<p>McDonald's Streamlines CI with GitHub Actions and Reusable Workflows</p> <p>Automate your build &amp; release with Github Actions</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/","title":"Data Structures and Algorithms","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#basics","title":"Basics","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#heap-memory","title":"Heap Memory","text":"<ul> <li>Heap Memory is different from Heap data type. Here, heap means a simply a pile of memory space available for programmers to allocate and deallocate.</li> <li>Memory in Heap takes time to access.</li> <li>The reference to heap memory on generation is stored in Stack Memory.</li> <li>Data is visible to all the threads here, so it can be changed by some other process which is risky.</li> <li>De-Allocation is not automatic and thus needs to be performed manually everytime.</li> </ul>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#accessing-heap","title":"Accessing Heap","text":"<ul> <li>Heap can be accessed using malloc() function or new operator. Though, keep in mind that the return types are different for each.<ul> <li>malloc() returns a null pointer and hence needs to be converted to suitable data type.</li> <li>new operator returns the pointer of exact data type and needs to be stored accordingly.</li> </ul> </li> </ul>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#allocating-memory-in-heap","title":"Allocating Memory in Heap","text":"<p>How to store pointer to an array with 5 elements in heap - malloc() function:</p> <p><pre><code>```cpp\nint *p = (int *)malloc(5*sizeof(int));\n</code></pre> <pre><code>- new operator\n\n    ```cpp\n    int *p = new int[5];\n    ```\n\n\nIn both cases, though the data is stored in heap, the pointer is\nallocated in the stack memory for easy access.\n\n**Create a pointer to a *struct* in a heap**\n\n```cpp\n#include &lt;iostream&gt;#include&lt;stdlib.h&gt;using namespace std;struct Rectangle{    int length;    int breadth;};int main(){    struct Rectangle *ptr = (struct Rectangle*)malloc(sizeof(struct Rectangle));    ptr-&gt;length = 10;    ptr-&gt;breadth = 15;    printf(\"Length: %d\\nBreadth: %d\",ptr-&gt;length, ptr-&gt;breadth);    return 0;}\n</code></pre></p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#references-in-c","title":"References in C++","text":"<p>Referencing is the method of providing multiple names to a single memory cell/data. This is essential when building small function where pointers are not that essential. Referencing can be done by:</p> <pre><code>int a = 10;int &amp;r = a;\n</code></pre> <p>Assume that Address of a is 200/201. When we reference r to a, now the address of r is also 200/201. This means that the same block of memory has multiple names to access it. All the data manipulation methods work on the referenced block as original.</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#abstract-data-type","title":"Abstract Data Type","text":"<p>Abstract Data type (ADT) is a type (or class) for objects whose behavior is defined by a set of values and a set of operations.</p> <p>E.g. Adding the functionality of pop(), push() can convert the linked list to either a stack or a queue data type.</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#physical-data-structures","title":"Physical Data Structures","text":"<p>Physical data structures are the actual implementations of data structures in memory. They determine the performance and efficiency of algorithms that use the data structure, by determining how the data is stored and accessed in memory.</p> <p>Types: - Arrays - Linked Lists</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#logical-data-structures","title":"Logical Data Structures","text":"<p>Logical Data Structures use the process of storing physical data structures in memory and perform various operation to optimize time or memory.</p> <p>Types: - Linear Data Structures - Stack (LIFO) - Queue (FIFO) - Non Linear Data Structures - Trees - Graph - Tabular Data Structures - Hash Table</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#time-and-space-complexity","title":"Time and Space Complexity","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#constant-time-o1","title":"Constant Time: O(1)","text":"<p>When there is no dependence on the input size n, an algorithm is said to have a constant time of order O(1).</p> <p>Example</p> <pre><code>void example_function(int array[]):    print(\"First element of list: \", array[0])\n</code></pre> <p>The function above will require only one execution step whether the above array contains 1, 100 or 1000 elements. As a result, the function is in constant time with time complexity O(1).</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#linear-time-on","title":"Linear Time: O(n)","text":"<p>Linear time is achieved when the running time of an algorithm increases linearly with the length of the input. This means that when a function runs for or iterates over an input size of n, it is said to have a time complexity of order O(n).</p> <p>Example</p> <pre><code>def example_function(lst, size):\n    for i in range(size):\n        print(\"Element at index\", i, \" has value: \", lst[i])\n</code></pre> <p>The above function will take O(n) time (or \u201clinear time\u201d) to complete, where n is the number of entries in the array. The function will print 10 times if the given array has 10 entries, and 100 times if the array has 100 entries.</p> <p>Note: Even if you iterate over half the array, the runtime still depends on the input size, so it will be considered O(n).</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#logarithm-time-olog-n","title":"Logarithm Time: O(log n)","text":"<p>When the size of the input data decreases in each step by a certain factor, an algorithm will have logarithmic time complexity. This means as the input size grows, the number of operations that need to be executed grows comparatively much slower.</p> <p>To better understand log n, let\u2019s think of finding a word in a dictionary. If you want to find a word with the letter \u201cp\u201d, you can go through every alphabet and try finding the word, which is linear time O(n). Another route you can take is to open the book to the exact center page. If the word on the center page comes before \u201cp\u201d, you look for the word in the right half. Otherwise, you look in the left half. In this example, you are reducing your input size by half every time, so the number of operations you will need to perform significantly reduces compared to going through every letter. Thus you will have a time complexity of O(log (n)).</p> <p>Example Binary search and finding the largest/smallest element in a binary tree are both examples of algorithms having logarithmic time complexity.</p> <p>Binary search comprises searching an array for a specified value by splitting the array into two parts consistently and searching for the element in only one of the two parts. This ensures that the operation is not performed on every element of the input data.</p> <pre><code>def binarySearch(lst, x):\n    low = 0    high = len(lst)-1    # Repeat until the pointers low and high meet each other    while low &lt;= high:\n        mid = low + (high - low)//2        if lst[mid] == x:\n            return mid\n        elif lst[mid] &lt; x:\n            low = mid + 1        else:\n            high = mid - 1    return -1\n</code></pre> <p>The Binary Search method takes a sorted list of elements and searches through it for the element x. This is how the algorithm works:</p> <ol> <li>Find the list\u2019s midpoint.</li> <li>Compare the target to the middle.</li> <li>We\u2019ve located our goal if our value and the target match.</li> <li>If our value is lesser than the target, we focus on the list with values ranging from the middle plus one to the highest.</li> <li>If our value is greater than the target, we focus on the list starting with the smallest value and ending with the midpoint minus one. Continue until we locate the target or till we reach the last element, which indicates that the element is not present in the list.</li> </ol> <p>With every iteration, the size of our search list shrinks by half. Therefore traversing and finding an entry in the list takes O(log(n)) time.</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#quadratic-time-on2","title":"Quadratic Time: O(n^2)","text":"<p>The performance of a quadratic time complexity algorithm is directly related to the squared size of the input data collection. You will encounter such time complexity in programs when you perform several iterations on data sets.</p> <p>Example</p> <pre><code>def quadratic_function(lst, size):\n    for i in range(size):\n        for j in range(size):\n            print(\"Iteration : \" i, \"Element of list at \", j, \" is \", lst[j])\n</code></pre> <p>We have two nested loops in the example above. If the array has n items, the outer loop will execute n times, and the inner loop will execute n times for each iteration of the outer loop, resulting in n^2 prints. If the size of the array is 10, then the loop runs 10x10 times. So the function ten will print 100 times. As a result, this function will take O(n^2) time to complete.</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#exponential-time-o2n","title":"Exponential Time: O(2^n)","text":"<p>With each addition to the input (n), the growth rate doubles, and the algorithm iterates across all subsets of the input elements. When an input unit is increased by one, the number of operations executed is doubled.</p> <p>Example</p> <pre><code>def fibonacci(n):\n    if (n &lt;= 1):\n        return 1    else:\n        return fibonacci(n - 2) + fibonacci(n - 1)\n</code></pre> <p>In the above example, we use recursion to calculate the Fibonacci sequence. The algorithm O(2^n) specifies a growth rate that doubles every time the input data set is added. An O(2^n) function\u2019s exponential growth curve starts shallow and then rises rapidly.</p> <p></p> <p>Time Notation</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#arrays","title":"Arrays","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#linked-list","title":"Linked List","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#basics_1","title":"Basics","text":"<ul> <li>The head and the tail elements have the pointer value</li> </ul> <p>null</p> <p>.</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#pros","title":"Pros","text":"<ul> <li>Ease of insertion and deletion due to the fact that the list is linked using pointers of the next dataset. - Inserts/Deletes are</li> </ul> <p>Constant Time Operations</p> <p>. - Random Access of data are</p> <p>Linear Time Operations</p> <p>. - Anytime we need to have \u201cfast\u201d insertions and deletions, but random access is less important.</p>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#cons","title":"Cons","text":"<ul> <li>Since the data is linked via pointers and separated across memory, it is slow to iterate through the whole list when needed. - Data is always stored in Heap. - If you are looking for a particular element in the list, the only possible option to reach that is go through every single element through the list due to lack of fixes position of the element. - You can only move in the forward direction when moving in the linked list.</li> </ul>"},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#stack","title":"Stack","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#trees","title":"Trees","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#hash-table","title":"Hash Table","text":""},{"location":"Study%20Notes/Programming%20Essentials/Data%20Structures%20and%20Algorithms%20ca51a4645bd94330bbe5aaffab1e6d3a/#resources","title":"Resources","text":"<ul> <li> <p>Udemy: Mastering Data Structures and Algorithm using C and C++:</p> <p></p> </li> <li> <p>neetcode.io/practice</p> </li> <li>Big O Notation Cheat Sheet</li> </ul>"},{"location":"Study%20Notes/Reinforcement%20Learning/","title":"Reinforcement Learning","text":""},{"location":"Study%20Notes/Reinforcement%20Learning/#concepts","title":"Concepts","text":"<p>Fundamentals of Reinforcement Learning</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/#courses","title":"Courses","text":"<p>Stanford CS234: Reinforcement-Learning</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/#projects","title":"Projects","text":"<p>Train AI to Play Snake</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/#resources","title":"Resources","text":"<p>Resources</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/","title":"Fundamentals of Reinforcement Learning","text":""},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#module-1","title":"Module 1","text":"<ul> <li> <p>Learning Objectives</p> <p>Lesson 1: The K-Armed Bandit Problem</p> <ul> <li>Define reward</li> <li>Understand the temporal nature of the bandit problem</li> <li>Define k-armed bandit</li> <li>Define action-values</li> </ul> <p>Lesson 2: What to Learn? Estimating Action Values</p> <ul> <li>Define action-value estimation methods</li> <li>Define exploration and exploitation</li> <li>Select actions greedily using an action-value function</li> <li>Define online learning</li> <li>Understand a simple online sample-average action-value estimation method</li> <li>Define the general online update equation</li> <li>Understand why we might use a constant step-size in the case of non-stationarity</li> </ul> <p>Lesson 3: Exploration vs.\u00a0Exploitation Tradeoff</p> <ul> <li>Define epsilon-greedy</li> <li>Compare the short-term benefits of exploitation and the long-term benefits of exploration</li> <li>Understand optimistic initial values</li> <li>Describe the benefits of optimistic initial values for early exploration</li> <li>Explain the criticisms of optimistic initial values</li> <li>Describe the upper confidence bound action selection method</li> <li>Define optimism in the face of uncertainty</li> <li>Weekly Reading: Chapter 2 - 2.7 (Pages 25 - 36)</li> </ul> <p>https://wpi0-my.sharepoint.com/:b:/g/personal/pbpatel_wpi_edu/Ee2VG6qKFTdGlJH5auSFaV8BYmfeMEIF-YAaHS_yih-lYA?e=KUm0S8</p> </li> </ul>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#introduction","title":"Introduction","text":"<p>In reinforcement learning, the agent generates it own training data by interacting with the world where it learns the consequences of it\u2019s action by trial and error. It is not supervised and no outside agent generally tells the agent if it is right or wrong.</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#k-armed-bandits-problem","title":"K-Armed Bandits Problem","text":"<p>Imagine a scenario of a doctor that is experimenting 3 different drugs (A, B and C) for an illness and tries to test it out on patients by injecting them with this medication. He observers during his initial results that drug C works well for his patients with negative or unsatisfactory results for drug A and B.</p> <p>He can now decide to either stop providing drug A and B which will stop the study and save patients lives but will remain in question whether they were actually bad or just the test patients were compatible with them. Other scenario can be where he can keep on experimenting for more results but it can result in death or severe condition of the patients. This scenario is know as K-Armed Bandits Problem.</p> <p>Definition: We have an agent who chooses between k actions and recieved a reward based on the action it chooses.</p> <p>In our scenario:</p> <ul> <li>Agent \u2192 Doctor</li> <li>k actions \u2192 Drugs</li> <li>Reward \u2192 Treated Patients</li> </ul>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#action-values","title":"Action-Values","text":"<p>The value of an action is the expected reward: when the action is taken</p> \\[ q_{*}(a)\\dot{=}\\in[R_{t}|A_{t}=a]\\&gt; \\forall a\\in\\{1,....,k\\} \\] <p>q*(a) is defined as expection of R_t given we selected action A, for each possible action 1 \u2192 k.</p> <p>=\u2004\u2211rp(r|a)r</p> <p>This conditional expectation is defined as sum over all possible rewards. Inside the sum, we have multiplied the possible reward by the probability of observing that reward. This could be extended to the continuous reward case by switching the summation to an integral.</p> <p>The goal of the agent is to maximize the expected reward. If the agent selects the action that has the highest value, it achieves that goal. This procedure is called as argmax or argument which maximizes our function q star better.</p> <p>argmax q(a*)</p> <p>Assume in our scenario we measure the blood pressure of the patient. We calculate the mean of each dataset of patients to measure the q* for our situation.</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#sample-average-method","title":"Sample Average Method","text":"<p>Sample average is a method to estimate q* by Total reward for each action by number of times the action has been selected.</p> \\[ Q_{t}(a)\\dot{=}\\frac{\\sum_{i=1}^{t-1}R_{i}}{t-1} \\] <p>Where the numerator is the Sum of rewards when a taken prior to t</p> <p>Where the denominator is the Number of times a taken prior to t</p> <p>When the action chooses the action which has had the highest q* for the purpose of having higher surity of achieving results and reducing the chance of failure. This method increases probability of success but fails to consider other methods which might yield better results in particular situation.</p> <p>Non-Greedy Action</p> <p>The Agent keeps on doing experimentation to improve its dataset while trying to solve the problem which can help assign better solution to the particular scenario. But this results in choosing the outcome which might bot result in positive reward for the scenario at the moment.</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#action-approaches","title":"Action Approaches","text":"<p>Greedy Action</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Fundamentals%20of%20Reinforcement%20Learning%2047bd64c7e938492ba45a80a67d2f9486/#ways-to-update-q_t","title":"Ways to Update Q_t","text":"<p>Incremental Update Rule</p> <p>Decaying Past Rewards</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Resources%20f10e4ed2906440b09b145eff7932d85f/","title":"Resources","text":""},{"location":"Study%20Notes/Reinforcement%20Learning/Resources%20f10e4ed2906440b09b145eff7932d85f/#course-outline","title":"Course Outline","text":"<ul> <li>Course 1 Outline</li> </ul> <p>https://wpi0-my.sharepoint.com/:b:/g/personal/pbpatel_wpi_edu/EdGOshV1mDVOr47PbOsWiMABe1qTEMKGfbKhLpSG6CZjKg?e=1USsEJ</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Resources%20f10e4ed2906440b09b145eff7932d85f/#textbook","title":"Textbook","text":"<ul> <li>Reinforcement Learning: An Introduction - Richard S. Sutton and Andrew G. Barto</li> </ul> <p>https://wpi0-my.sharepoint.com/:b:/g/personal/pbpatel_wpi_edu/ERlBqRDfx5dLhd63SGm_pVIBfeJzgOepvWyhWQ59EDrI2Q?e=X5Kjx1</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Resources%20f10e4ed2906440b09b145eff7932d85f/#video-resources","title":"Video Resources","text":"<p>Fundamentals of Reinforcement Learning</p> <p>Sample-based Learning Methods</p> <p>Prediction and Control with Function Approximation</p> <p>A Complete Reinforcement Learning System (Capstone)</p> <p>Stanford CS234: Reinforcement Learning | Winter 2019</p> <p>https://www.youtube.com/watch?v=YZ5pOgY5hEE&amp;ab_channel=MITOpenCourseWare</p> <p>https://www.youtube.com/watch?v=zdotUAxiPGM&amp;ab_channel=MITOpenCourseWare</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Stanford%20CS234%20Reinforcement-Learning%2025155c55fb6d410583e4571b6eefbfd6/","title":"Stanford CS234: Reinforcement-Learning","text":""},{"location":"Study%20Notes/Reinforcement%20Learning/Stanford%20CS234%20Reinforcement-Learning%2025155c55fb6d410583e4571b6eefbfd6/#notes","title":"Notes","text":"<p>Notes are annoted in OneNote:</p> <p>https://wpi0-my.sharepoint.com/:o:/g/personal/pbpatel_wpi_edu/EvQtcZkSU5ZJpwjzg0TpS4oBlXQIBceOyITAhaeXok_5Xw?e=RxsrRh</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Stanford%20CS234%20Reinforcement-Learning%2025155c55fb6d410583e4571b6eefbfd6/#resources","title":"Resources","text":"<ul> <li>Stanford Course Slides:</li> </ul> <p>https://wpi0-my.sharepoint.com/:f:/g/personal/pbpatel_wpi_edu/EsC34jilYWNEvPGpxY9GMwIBje0OXmJdvVghX1ocZbod1g?e=Yrg1JS</p> <ul> <li>Complete Folder on OneDrive:</li> </ul> <p>https://wpi0-my.sharepoint.com/:f:/g/personal/pbpatel_wpi_edu/Em_eLiQZGJdCuLY0E_GfozIBufJmLGP0Z4uq4KdI-o7D1A?e=3JuPlP</p> <ul> <li>Course Page:</li> </ul> <p>CS234: Reinforcement Learning Winter 2023</p> <ul> <li>Course Playlist:</li> </ul> <p>Stanford CS234: Reinforcement Learning | Winter 2019</p>"},{"location":"Study%20Notes/Reinforcement%20Learning/Train%20AI%20to%20Play%20Snake%20095ec04cfe95462c98d433350975a742/","title":"Train AI to Play Snake","text":""},{"location":"Study%20Notes/Rust%20Programming/","title":"Rust Programming","text":""},{"location":"Study%20Notes/Rust%20Programming/#fundamentals","title":"Fundamentals","text":"<p>Memory and Allocations</p>"},{"location":"Study%20Notes/Rust%20Programming/Memory%20and%20Allocations%200d65715c6a974cc9ad5131ed77462335/","title":"Memory and Allocations","text":"<p>Table of Contents</p>"},{"location":"Study%20Notes/Rust%20Programming/Memory%20and%20Allocations%200d65715c6a974cc9ad5131ed77462335/#deep-copy","title":"Deep Copy","text":"<ul> <li> <p>Copying the structure of the data and the complete underlying data.</p> <p></p> </li> <li></li> </ul> <p></p>"},{"location":"Study%20Notes/Rust%20Programming/Memory%20and%20Allocations%200d65715c6a974cc9ad5131ed77462335/#shallow-copy-move","title":"Shallow Copy / Move","text":"<ul> <li> <p>Copy the data structure info but not the underlying data.</p> <p></p> </li> </ul>"},{"location":"Study%20Notes/Software%20Specific%20Notes/PlatformIO/","title":"PlatformIO Notes","text":"","tags":[]},{"location":"Study%20Notes/Software%20Specific%20Notes/PlatformIO/#intellisense-for-neovim","title":"Intellisense for NeoVim","text":"<p>Incase the Intellisense is Not Working or Headers from System Libraries cannot be found, do the following:</p> <p>Add this to your <code>platformio.ini</code>: <pre><code>build_flags = -Ilib -Isrc\n</code></pre> And then you need to run this command: <pre><code>make clean &amp;&amp; pio run -t compiledb\n</code></pre></p>","tags":[]}]}